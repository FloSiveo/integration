##########################################################
#                    Install syncthing                   #
##########################################################

- name: SYNCTHING - Add the OS specific variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_os_family }}.yml"

- name: SYNCTHING - Install syncthing
  ansible.builtin.yum:
    pkg:
      - syncthing
    state: latest
  when:
    - ansible_distribution == 'CentOS'

- name: SYNCTHING - Install syncthing
  ansible.builtin.apt:
    pkg:
      - syncthing
    state: latest
  when:
    - ansible_distribution == 'Debian'

- name: SYNCTHING - Create user accounts
  ansible.builtin.user:
    name: '{{ item.name }}'
    state: present
    createhome: yes
    home: '{{ item.home }}'
    shell: /sbin/nologin
    system: yes
  with_items:
    - { name: 'syncthing', home: '/var/lib/syncthing' }
    - { name: 'syncthing-depl', home: '/var/lib/syncthing-depl' }

- name: SYNCTHING - Create log file
  ansible.builtin.file:
    path: /var/log/syncthing.log
    mode: 0644
    state: touch
    owner: syncthing
    group: syncthing

- name: SYNCTHING - Configure logging
  ansible.builtin.copy:
    src: log.conf
    dest: /etc/systemd/system/syncthing@.service.d/
    mode: '0644'
  notify:
    - SYNCTHING - Restart syncthing

- name: SYNCTHING - Setup rotation of syncthing logs
  ansible.builtin.copy:
    src: syncthing
    dest: /etc/logrotate.d/
    mode: '0644'

- name: SYNCTHING - Force restart of service to generate config files
  ansible.builtin.systemd:
    name: syncthing@{{ item }}
    state: restarted
  with_items:
    - syncthing
    - syncthing-depl

- name: SYNCTHING - Pause for up to 300 seconds to enable syncthing start
  ansible.builtin.wait_for:
    path: /var/lib/syncthing/.config/syncthing/config.xml

- name: SYNCTHING - Pause for up to 300 seconds to enable syncthing-depl start
  ansible.builtin.wait_for:
    path: /var/lib/syncthing-depl/.config/syncthing/config.xml

- name: SYNCTHING - Get local device id for syncthing
  ansible.builtin.command: syncthing -home=/var/lib/syncthing/.config/syncthing/ -device-id
  register: localdeviceid

- name: SYNCTHING - Set LOCAL_DEVICE_ID for syncthing
  ansible.builtin.set_fact:
    LOCAL_DEVICE_ID: "{{ localdeviceid.stdout }}"

- name: SYNCTHING - Get local device id for syncthing-depl
  ansible.builtin.command: syncthing -home=/var/lib/syncthing-depl/.config/syncthing/ -device-id
  register: localdepldeviceid

- name: SYNCTHING - Set LOCALDEPL_DEVICE_ID for syncthing-depl
  ansible.builtin.set_fact:
    LOCALDEPL_DEVICE_ID: "{{ localdepldeviceid.stdout }}"

- name: SYNCTHING - Find pulsemain device id for syncthing
  ansible.builtin.command: syncthing -home=/var/lib/syncthing/.config/syncthing/ -device-id
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  register: pulsemaindeviceid
  when:
    - PULSEMAIN_IP != ''

- name: SYNCTHING - Set PULSEMAIN_DEVICE_ID for syncthing
  ansible.builtin.set_fact:
    PULSEMAIN_DEVICE_ID: '{{ pulsemaindeviceid.stdout }}'
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  when:
    - PULSEMAIN_IP != ''

- name: SYNCTHING - Find pulsemain device id for syncthing-depl
  ansible.builtin.command: syncthing -home=/var/lib/syncthing-depl/.config/syncthing/ -device-id
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  register: pulsemaindepldeviceid
  when:
    - PULSEMAIN_IP != ''

- name: SYNCTHING - Set PULSEMAINDEPL_DEVICE_ID for syncthing-depl
  ansible.builtin.set_fact:
    PULSEMAINDEPL_DEVICE_ID: '{{ pulsemaindepldeviceid.stdout }}'
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  when:
    - PULSEMAIN_IP != ''

- name: SYNCTHING - Create syncthing special folders
  ansible.builtin.file:
    path: '{{ item }}/.stfolder'
    state: directory
    mode: '0755'
    owner: syncthing
    group: syncthing
  with_items:
    - /var/lib/pulse2/clients
    - /var/lib/pulse2/imaging/bootmenus
    - /var/lib/pulse2/xmpp_baseremoteagent
    - /var/lib/pulse2/packages/sharing/global

- name: SYNCTHING - Create stignore files
  ansible.builtin.copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    mode: '0644'
    owner: syncthing
    group: syncthing
  with_items:
    - { src: bootmenus_stignore, dest: /var/lib/pulse2/imaging/bootmenus/.stignore }
    - { src: downloads_stignore, dest: /var/lib/pulse2/clients/.stignore }

- name: SYNCTHING - Configure syncthing
  ansible.builtin.template:
    src: '{{ item.src }}'
    dest: /var/lib/{{ item.inst }}/.config/syncthing/config.xml
    mode: '0644'
    owner: '{{ item.inst }}'
    backup: yes
  with_items:
    - { src: config.xml.j2, inst: syncthing }
    - { src: config-depl.xml.j2, inst: syncthing-depl }
  notify:
    - SYNCTHING - Restart syncthing

- name: SYNCTHING - Force restart of service to use new config files
  ansible.builtin.meta: flush_handlers

- name: SYNCTHING - Stop service for editing configuration on pulsemain
  ansible.builtin.systemd:
    name: syncthing@{{ item }}
    state: stopped
  with_items:
    - syncthing
    - syncthing-depl
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  when:
    - PULSEMAIN_IP != ''

- name: SYNCTHING - Delete relayserver device from pulsemain syncthing
  ansible.builtin.command: xmlstarlet ed --inplace -d "configuration/device[@name='{{ XMPP_DOMAIN }}']" /var/lib/{{ item }}/.config/syncthing/config.xml
  with_items:
    - syncthing
    - syncthing-depl
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  ignore_errors: yes
  notify:
    - SYNCTHING - Restart syncthing on pulsemain
  when:
    - PULSEMAIN_IP != ''

- name: SYNCTHING - Add relayserver device to pulsemain syncthing
  ansible.builtin.command: xmlstarlet ed --inplace -s "configuration" -t elem -n "device id='{{ LOCAL_DEVICE_ID }}' name='{{ XMPP_DOMAIN }}' introducer='false'" /var/lib/syncthing/.config/syncthing/config.xml
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  notify:
    - SYNCTHING - Restart syncthing on pulsemain
  when:
    - PULSEMAIN_IP != ''

- name: SYNCTHING - Add relayserver device to pulsemain syncthing-depl
  ansible.builtin.command: xmlstarlet ed --inplace -s "configuration" -t elem -n "device id='{{ LOCALDEPL_DEVICE_ID }}' name='{{ XMPP_DOMAIN }}' introducer='false'" /var/lib/syncthing-depl/.config/syncthing/config.xml
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  notify:
    - SYNCTHING - Restart syncthing on pulsemain
  when:
    - PULSEMAIN_IP != ''

- name: SYNCTHING - Force restart of service on pulsemain to use new config files
  ansible.builtin.meta: flush_handlers

- name: SYNCTHING/APACHE - Setup local apache for syncthing
  ansible.builtin.copy:
    src: syncthing.conf
    dest: '{{ APACHE_CONF_PATH }}/'
    mode: '0644'
  notify:
    - SYNCTHING - Restart apache

- name: SYNCTHING/APACHE - Enable syncthing configuration
  ansible.builtin.command: a2enconf syncthing
  notify:
    - SYNCTHING - Restart apache
  when:
    - ansible_distribution == 'Debian'

- name: SYNCTHING/APACHE - Setup pulsemain apache for relay syncthing
  ansible.builtin.template:
    src: syncthing.conf.j2
    dest: '{{ APACHE_CONF_PATH }}/syncthing-{{ XMPP_DOMAIN }}.conf'
    mode: '0644'
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  notify:
    - SYNCTHING - Restart apache on pulsemain
  when:
    - PULSEMAIN_IP != ''

- name: SYNCTHING/APACHE - Enable syncthing configuration
  ansible.builtin.command: a2enconf syncthing-{{ XMPP_DOMAIN }}
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  notify:
    - SYNCTHING - Restart apache on pulsemain
  when:
    - ansible_distribution == 'Debian'
    - PULSEMAIN_IP != ''

- name: SYNCTHING - Ensure syncthing is running
  ansible.builtin.systemd:
    name: syncthing@{{ item }}
    state: started
    enabled: yes
    masked: no
  with_items:
    - syncthing
    - syncthing-depl
