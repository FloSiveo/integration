---

##########################################################
#                    Compute variables                   #
##########################################################

- name: VARS - Set CIDR if INTERFACE defined
  set_fact:
    CIDR : "{{ vars['ansible_'~INTERFACE].ipv4.address }}/{{ vars['ansible_'~INTERFACE].ipv4.netmask }}"
  when:
    - (INTERFACE is defined) and (INTERFACE|length > 0)

- name: VARS - Set CIDR if INTERFACE not defined
  set_fact:
    CIDR : "{{ ansible_default_ipv4.address }}/{{ ansible_default_ipv4.netmask }} | ansible.netcommon.ipaddr('network/prefix') }}"
  when:
    - (INTERFACE is undefined) or (INTERFACE|length == 0)

- name: VARS - Set NETWORK_ADDRESS
  set_fact:
    NETWORK_ADDRESS : "{{ CIDR | ansible.netcommon.ipaddr('network/prefix') }}"

- name: VARS - Set IPTABLES_SAVE_PATH
  set_fact:
    IPTABLES_SAVE_PATH : "/etc/sysconfig/iptables"
  when:
    - ansible_distribution == 'CentOS'

- name: VARS - Set IPTABLES_SAVE_PATH
  set_fact:
    IPTABLES_SAVE_PATH : "/etc/iptables/rules.v4"
  when:
    - ansible_distribution == 'Debian'

- name: VARS - Set PUBLIC_INTERFACE_NAME
  set_fact:
    PUBLIC_INTERFACE_NAME : "{{ item }}"
  when:
    - INSTALL_TYPE == 'p'
    - hostvars[inventory_hostname]['ansible_{{ item }}'].ipv4 is defined
    - hostvars[inventory_hostname]['ansible_{{ item }}']['ipv4']['address'] == '{{ PUBLIC_IP }}'
  with_items:
    - "{{ ansible_interfaces }}"

- name: VARS - Set CLIENTS_DOWNLOADS_SERVER
  set_fact:
    CLIENTS_DOWNLOADS_SERVER : "{{ SERVER_FQDN }}"
  when:
    - INSTALL_TYPE == 'p'

- name: VARS - Set CLIENTS_DOWNLOADS_SERVER
  set_fact:
    CLIENTS_DOWNLOADS_SERVER : "{{ PULSEMAIN_FQDN }}"
  when:
    - INSTALL_TYPE != 'p'

- name: VARS - Set PYTHON_BASEDIR
  set_fact:
    PYTHON_BASEDIR: /usr/lib/python2.7/dist-packages
  when:
    - ansible_distribution == 'Debian'

- name: VARS - Set PYTHON_BASEDIR
  set_fact:
    PYTHON_BASEDIR: /usr/lib/python2.7/site-packages
  when:
    - ansible_distribution == 'CentOS'

##########################################################
#                       SIVEO Infra                      #
##########################################################

- name: SIVEOINFRA - Install a few interesting tools
  apt:
    state: latest
    pkg:
      - vim
      - htop
      - ntopng
      - less
      - open-vm-tools
      - curl
      - wget
    update_cache: yes

- name: SIVEOINFRA - Configure ntopng on port 3003
  lineinfile:
    path: /etc/ntopng.conf
    regexp: '^-w='
    line: '-w=3003'

- name: SIVEOINFRA - Restart ntopng
  systemd:
    enabled: yes
    name: ntopng
    state: restarted

- name: SIVEOINFRA - Add all users ssh keys to root account
  lineinfile:
    path: /root/.ssh/authorized_keys
    owner: root
    group: root
    mode: '0600'
    create: yes
    line: "{{ item }}"
  loop:
    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQChcb9EXJ9idGBGHmuPQ/masVeWFussGbtmo2aqbieWTCp8EsmsUUmLgRVtjoUMyKfWQnMhCV9ixZmNynBrgMrJamfZpE+xFpnkTVJeTOfpDEDClUQYzwXTEtMvL9IlLRLPX1KGYzfY/FG3wmhytp8dfagi/rE9Runj6gG+bzSzW8PD8/eBvLWz6hcAxLulMn4XnWhATAgsVxVmdCpOJyAfz01ZrYzVLTNZuf7+la2MRWh77u6sCNciijpZnqewbzDWk8QM32r2unRc1JwjUmIfidvNx4sO3H2yvBmRevx3JHD/jJjMRpyyf9iXiRMRy85RhxDhunCkKgcYtNboV8YT support@argo
    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8rlHjo5RxBMRID1svBBVHj+XYrZ45e9ZjnWsR1h/IVBKHQpU6EOBIYPycpsHtGbREipB47hIUZssovncFabutW8YcNoW6SGTKFrbadONi0rh2KmQVJjUOGgI/UtkMoydUn0D4+ibUbYYzeqHFo3QloPACl833ZNPn73IHa/UdrwEDZ3I/eb0lvfALqFWGUaADSl7heZ7hPam2MxWfHn9Jt+JHw1ncY9BYiHrRRVgMytHZvOPiPy87sfx8DsUwZ0OTAiopjI8efw5nI7W2gR3R84KU0k7vVzUk3cX14VNTNmx3M4KAalLtV2WOlPY63abnsKJJl0+ItMGjSquhEZZr jfk@jfk-ThinkPad-T530
    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD2cg/e1ACe6t/hyoymaQZ13bw+nKbbB/lvy/2C5tAxfZIFztKKva4TKDKol3v/hsKP3X94cynPTrbK/MwWFW3xrzee/iPQuHnVWjWcGoyhOz5EBmOlo/gHO/ZO9z+s5zO9Fu2PU095FsUo5+3AXp38hebln2vIgJt6A3ciyM3frRXmWqRAq+G1eM/rkL3axIOpObI7d1i2JsnPOv/Nx8G2wZSNYsryQjvUbh92kkK+tksMYYQv7jD6R1jbAALIKteRn87LrIScyHe9LkpsaznoxOGTxAWEJ2e0Zkb79QGaNkF/+VP5UEfW/k+ihGBrYKsWqPrd/YZ3L4+2mc7oI5k7 noel@MacBook-Air
    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDOHoichLXKojzZHpJPyh+LP3VIRBANdu1zBNaw7J58u9cN87XdVAG0uE+OpJnmJowzusKYXEMMYBw8TDvh3HNKPINMBHgygpVeNE6ZSSJM7acupcgQjAe0w9BcQXDiYkci3F0ZYT09oVKVaSiyNoAS/0IDSy8MmauYEBiwn/qpubAiwUqz3qSKpPs+3zOl3pj2fu9Zju0fd9CGP58Ym98nFGL9w1Y+kFc1DFJAoRa3GQ+pJH+5+v0cbwMr620XVHFN7xGNwZT/FB/uar3xKvYwOSR7MSRwgUqb/rU46v1KlSM3p4UVrqvGiIMuGOg/KotE2BFSfSVgTHqFD2sdS+ll noel@orchestra
    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGyI8oIP8SgahPbMZ04Msr/vnI2gf4yx//QhEnZv8b++WIH0oibfK8g5Lz4HXReJRHzNXN1EhKQXoClgAKwv7zqkTLxV44tVcz8cwvfldkKNB+QxfL74JgsxCyNW8mpJdrJ71kbkT4Jt6AxeEd10ltQyqT7QDQMM7fxH8dbOCMcc7jtgOqwPXLy7hEumqkYxNuMxjrAbiDk2Nx0ddP2Ta4NJjSsGzUzSPsGhLVCO3+Wv6Ymss9Vacbe684ERwqz6odi5ZX0utfXXNphqqAckKCxurrI+LoWzt9MgWtR9iJC1joVDqRbggNm6bNNPZIdhmi5/yJrk3x7qwXb7uQNiE7 neoclust@localhost
    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDRRyiSDBptNMse/nYY61hxMRHq95R5TohPlstr8kxCm2+Hzekd2V85znKMHhJqyBebo6FpVRYeZVyOjQB4EL06DPWget4jn/OJVJ7iavU7Rpi9eU1jkmE+M2Myt9WFJtGxeq7nxlDxn+LxEy2A3hGvs70pji3D+M4X3G/+dZVmsCn7Mz9lwOdzd+IUNsn6YIuUBbr380fKVxAmZpYIDJc9CvPj/fDvgYQBwPAa2k0grBiPR5YTmH+R7GhINWAh2aDFx5lUCiXjpGvdadHHZK6ahPOhAYxfAX1iuR+9qWSk1rNQy6P69rmIJOz5oTzfZVgpPITGpI5MQ7cYPyIvicb9 spointu@macbook
    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsVltQ8g/4uxgmdn4kyFydYKy6AK09eYTJQ8C8T1k1w8Ok5uphZDg9ybaPHobCvzhQpSGlfQC8dDANSMWovqceAGApxkd3WQU6sFh+CE9iPK3rOrvSGJV3yysGuHBbfi2VRMgrvRyA9L+BCU7Su/Ozz/1lhiKwLtN6R2aoG/JNE5oAI5bXPM6MNx3mKlv4D7aSsGhsD4B1N/RpOUzr7yFzYfWFUHfO+tvU1mFLcxYNnFRdjE7vwXPLYkvdw4GWP+93EWl/3pViwjB1ae7xypkfx1G2Bd+DvOvnAqIHVblcvrUINXWDvZrhkyt6gk1k8h//A9aikxeC2CNO6i3BlmRN yvan@sparkle
    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCssmEwSomtp8Oc3JBQm6zQZE0b+ZMH19CKeM+6iG5E2kHZNKoRQEknhhV66oAP3UMYGak+Bm3iQgaoZC4wGkwjpraUsIX4lzezYBWAVQsvBKzTA7JlVLDnoppoXVXVmAHUdYi/0kGlLNrlGZ4wujcZ9R9vdHYWVuKS/uNzCzz90D8aHxuwEyoAFlv9oOGhaDs2y7P8IuMKtRj1N5NHyoV7ZytxWob7ELdvSPx3NeYeYPQdKHpBjCgR461qILkwaXKCSiCT790jc6KTJpHCg2A8dxg4dPBC9NOUKnNOlri6n0nD6HPBN2LlYJLNeAkF50acgj1iRxXY1qGCt/u0oA9H yvan@falaou
    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDxuTbvxmFMIObNne3nNrOjfH+G/zXsbHvXmgf/RDtrqQoykzFwvL0MzY6nyEroGtGKB2rCHXbQbtWa2j5E9ItJksVv6vnbt1VQxEvYQaj+SGUudr/rBOALjw5SziHrqDAW8jeQTZhfm99FQ5nCkHmngLfoyJAb5jkPppHHs2+jfM04sI/v9pro8I/LQGsvTGCt+2MUv5iDwsM7caPW9NoE/3Uxe6buvnLI8qikKVDLSy2g6XBtuQxvcDBqAS7qk9Q6sx1oblYE7nF/GSH6T9VyLpg8EIsZvfAtKwmR7TjAT3f339/UXwS1I7nyYycTUczfpKTKLju1orkKb6ISdhn6nNVPc7KTcgnRwDFvZsI3Ytc9bHQq5ASm1RSD5FxUmlS7ulyPlENDpUURvvGxeMaF/400VH4VwkP973QCERTyk9K1qdKFjI0bOseoSNbsJfq0c63/s/bzVxfiNZk/3R2qTDYRFgqtQRG8pcqiUhIkBps2rAmgmm1clxPXW1cG3js= yvan@rider
    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC8y9uLS6+Sdan2Ej19g7OP1MjSsF9RlZiGZafwLkfqtlAjG/MV8Yi2txTP2db5zND7x07Jb6yIskNRzUTvSK6CExi4Vl3+JEbHawNCeXRpaZ3rpi0sSSImWuguWf9Y2SkGgnP/IdSrYoZNzPhvLW4W/+jZgkC9FQVfbMqwUT1fS9gLPZsbFWFRkWILKWDWpJ4OUrwb+pIRrv2jKimS0r3nuZA/17O4AWcvTuv17f4PFxkLAqvJHhxO5Dbh1jX5RIkQaNDFRBuRefS/x3DtBxyRVXs04sSOsM+37H46FrDj7kk1i8D+453PoTnzDbxPq2+u+RwFp9UbV4eDXA8znqtWb/qlCFZpYyL9bj9+F2s3kCq1yJGoy7X+4opgadDax/VN+WzVEtlgDmF+tPlLWi9ICVIkJxI5SV4sfOe4E7pcnZqHTx+vcTUVadPnQoelgHSLliur8gg6T4S3dVsOPGmabWbZzD0gX5bhmvZdcEVafDyzQ+gWQkXRo30bGXtxI0YVSEKjHO7qdMyECf2JWdr/h8MKAt9yiLW+ldJLfZxqnW/DOcLsAAzkBgNkdab3/ER2obWsvssrlPxuYn1f9zgCFFe/A4bfU4pkBlvDjMjUF9EedFCNg0hGaeaVJkeuKkducFSPaeBTtj1eOyy8NmZcEw+CTCppXEaD6X0QVZ8bTw== William@LAPTOP-76SPQQ11
    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDe+Fidc9A5f1myXEz1MpWDIH860rXDC8kEMAUbCS0VXR/mcABUuBTn4wVvw5Oj2hvrgxQOxfIhAd5b5VizsFDGFaKkqqQ8tx1+az4TOmLFAYt+P4QtyqsnIYXBnRT7rNHE/LCBhjuzg1Oe00ay7Y8AO2znYGvs5QE4jpjEYVotLF71wtLt4C+J0DAH2SRGiZDK7KYtL3lthF0jcy18MQ/+qhCqehlBUT+lc2vwBPkBJlCsGz0q7yYIc62htvESpPlN/ItCYJDJaEKxASpjCwqfrRGrhl2aCYP/W0FJovR8FKKzObiH8TGwg68OAOr6Rcsg0/XZ1oBdqB3F6uUNFwH31k77i/i+QDYA3sD/JEvaa7i8YwDqd0ZWCSgkEZc+w2Tz/ejNvo0WUn/lU5p1w7o2p5ucho2job5em6qPt02p8IUZSfPz+hNGQa8VmYMyuLi5UPc9d2YE/dn/DTFG0TkSca5vuWsvvrTLq+HH9KnHvpCgW+7pFwH07E9f/SjAFkM= root@WILLIAMSIVEO
    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDJwbBieGVByY+1SLG36eR+XuPYjQdYtELRDLgdQ6tzUMFnP5x9bheWMq6MWzZ4c9nmNUIWd1Xz2uZfjA6dNPO7nuolS8+YvAoaE2W1EwhKhb4yX5a4emLp3/JJp/IZQn0pUQst7KECQHwjNfdoy3MITJvDhhvH5iYIjZ+Cn58KvR+t0cAigSe+q1yPtap/mUyXv2zk7kOuCgyQB5bIISmkzJB9CuKiDdPAkvuk3yY2rUoW+qQpe00h2PfaIpan37U0tgbVm3/iTS3kVecjtMzIuRGxgpTXzd2bG+6DWG843RhClyXUR+djJjo8PQ0/CAI66hQl+MGGL0YJ2i8X1m0MGmK6lFpuTb674yXVX/+1EuIFaHwQ5OW5pVy7komhlriYGhZs18FzGrDH+nCbnAaoAXbBWkmYJEBMcQNyugn+DkjG3EI2QSMhmQN7ImcuBHiT86BQOomHBAB0+E08w+mpYLgqFc9drpPOBrqemuvsjwgWMRSCziBGtm663uBsMNM= lucas@nblucas
    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDKTlpwznsamhXHZ0hGRN8mH3gBrpFwGsVX5qgPoFzWCn7HUItFQCey8bpEzd2UaRWRU6KUb2WA2tDyXfvOXMg+54Ugnwkb0eYvpBUofYzG6RSTCnZRkxY0hXSdvA+foYykrkG4bVVU1ByRX+SjB/tPXVJ0InmcEF97Q/6k2pQDfjIOjQFCWjlskyCA7HUDIIkSlYVW7dNdG5qLSQO2s9vGZKycFZ/TMCVvP2/svm8SEozQmrp457aRUgYEO02yzFziozmclteEiY54GzA99V7F/9NrLFSiXi0yKek+P9y2DVBIuy/+wecO8qj4ypq6dTznJZtB7l9QqmzJuuhhmQ9CkakwwHYZfB2FJxDEtRG7rjeE8SrIiZa7DlH+1l1Jz6ORz981XEh+5lVF/8uBJIZQcKaXRl7DH+CRTeGDopgQnLNOa0VLJgJmJSBQPpx0ciBIR6DdvVhR8y2W8ljHWQVtXGxmsxP89yxOBH8dZ/hynks3zPdwBIcZv0qtBUzxa58= xdrien@nbadrien

- name: SIVEOINFRA - Disable password-based logins in SSH
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: '^#?AuthenticationMethods', line: 'AuthenticationMethods publickey' }
    - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }
    - { regexp: '^#?ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication no' }
    - { regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
    - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin without-password' }

- name: SIVEOINFRA - Restart sshd
  service:
    name: sshd
    state: restarted

- name: SIVEOINFRA - Create clusters and rules
  command: mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p'{{ DBADMINPASSWD }}' xmppmaster -e "{{ item }}"
  loop:
    - UPDATE cluster_ars SET name='ars_private', description='Private cluster' WHERE id=2
    - DELETE FROM cluster_ars WHERE id=3
    - UPDATE has_cluster_ars SET id_cluster=2 WHERE id=3
    - UPDATE rules SET level=1 WHERE id=9
    - UPDATE rules SET level=2 WHERE id=5
    - UPDATE rules SET level=9 WHERE id=7
    - UPDATE rules SET level=7 WHERE id=8
    - INSERT INTO has_relayserverrules (`rules_id`, `order`, `subject`, `relayserver_id`) VALUES (9, 0, '{{ NETWORK_ADDRESS }}', 2)
    - INSERT INTO has_relayserverrules (`rules_id`, `order`, `subject`, `relayserver_id`) VALUES (9, 1, '{{ NETWORK_ADDRESS }}', 3)
    - UPDATE relayserver SET mandatory=0 WHERE id>1;
  when:
    - INSTALL_TYPE == 'p'

- name: SIVEOINFRA - Imaging setup
  command: mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p'{{ DBADMINPASSWD }}' imaging -e "{{ item }}"
  loop:
    - DELETE FROM ImagingServer WHERE id>1
    - DELETE FROM Entity WHERE id>1
  when:
    - INSTALL_TYPE == 'p'

- name: SIVEOINFRA - Set permissions for Workbench
  command: mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p'{{ DBADMINPASSWD }}' -e "{{ item }}"
  loop:
    - GRANT ALL PRIVILEGES ON *.* TO '{{ DBADMINUSER }}'@'localhost' IDENTIFIED BY '{{ DBADMINPASSWD }}'
    - FLUSH PRIVILEGES
  when:
    - INSTALL_TYPE == 'p'

- name: SIVEOINFRA - Create my.cnf
  file:
    path: /root/.my.cnf
    state: touch
    owner: root
    group: root
  when:
    - INSTALL_TYPE == 'p'
    
- name: SIVEOINFRA - Complete data to my.cnf
  blockinfile: 
    dest: /root/.my.cnf
    content: |
        [mysql]
        user={{ DBADMINUSER }}
        password={{ DBADMINPASSWD}}

        [mysqladmin]
        user={{ DBADMINUSER }}
        password={{ DBADMINPASSWD}}

        [mysqlcheck]
        user={{ DBADMINUSER }}
        password={{ DBADMINPASSWD}}

        [mysqldump]
        user={{ DBADMINUSER }}
        password={{ DBADMINPASSWD}}
  when:
    - INSTALL_TYPE == 'p'
    
- name: SIVEOINFRA - Install python modules needed for deploy_pulse_files_from_git.py
  apt:
    state: latest
    pkg:
      - python3-pip
      - python3-git
  when:
    - INSTALL_TYPE == 'p'
    - ansible_distribution == 'Debian'

- name: SIVEOINFRA - Find number of substitutes
  shell: "python3 -m pulse_debug_tools server --action=list_substitutes --options=type=asse | grep master_asse |wc -l"
  register: nb_substitutes
  when:
    - INSTALL_TYPE == 'p'

- name: SIVEOINFRA - Create substitutes
  command: python3 -m pulse_debug_tools server --action=create_substitute --options=dryrun=no,type={{ item }}
  loop:
    - asse
    - reg
    - subs
    - inv
    - mon
    - log
    - depl
  when:
    - INSTALL_TYPE == 'p'
    - nb_substitutes.stdout == '1'

- name: SIVEOINFRA - Create Teams 
  command: python3 -m pulse_debug_tools server --action=create_team --options=dryrun=no,team_name={{ item }},user_regex=^{{ item }}.*
  loop:
    - TeamA
    - TeamB
  when:
    - INSTALL_TYPE == 'p'
  ignore_errors: yes

- name: SIVEOINFRA - Provision users 
  command: crudini --set /etc/mmc/plugins/{{ item.file }} {{ item.section }} {{ item.field }} '{{ item.value }}'
  loop:
    - { file: base.ini.local, section: authentication_baseldap, field: authonly, value: 'root TeamA-spo TeamA-jfk TeamA-kno' }
    - { file: base.ini.local, section: authentication_externalldap, field: exclude, value: 'root TeamA-spo TeamA-jfk TeamA-kno' }
    - { file: base.ini.local, section: provisioning, field: method, value: glpi }
    - { file: glpi.ini.local, section: provisioning_glpi, field: profiles_order, value: Technician }
    - { file: glpi.ini.local, section: provisioning_glpi, field: profile_acl_Technician, value: "{{ TECHNICIAN_ACL }}" }
  when:
    - INSTALL_TYPE == 'p'

- name: SIVEOINFRA/SYNCTHING - Stop service for setting up discovery and relay server urls
  systemd:
    name: syncthing@{{ item }}
    state: stopped
  with_items:
    - syncthing
    - syncthing-depl

- name: SIVEOINFRA/SYNCTHING - Define global announce server url
  command: xmlstarlet ed --inplace -u "configuration/options/globalAnnounceServer" -v "{{ SYNCTHING_DISCOVERY_URL }}" /var/lib/{{ item }}/.config/syncthing/config.xml
  with_items:
    - syncthing
    - syncthing-depl

- name: SIVEOINFRA/SYNCTHING - Define syncthing relay server url
  command: xmlstarlet ed --inplace -u "configuration/options/listenAddress" -v "{{ SYNCTHING_RELAY_URL }}" /var/lib/{{ item }}/.config/syncthing/config.xml
  with_items:
    - syncthing
    - syncthing-depl

- name: SIVEOINFRA/SYNCTHING - Enable relaying
  command: xmlstarlet ed --inplace -u "configuration/options/relaysEnabled" -v "True" /var/lib/{{ item }}/.config/syncthing/config.xml
  with_items:
    - syncthing
    - syncthing-depl

- name: SIVEOINFRA/SYNCTHING - Disable NAT
  command: xmlstarlet ed --inplace -u "configuration/options/natEnabled" -v "False" /var/lib/{{ item }}/.config/syncthing/config.xml
  with_items:
    - syncthing
    - syncthing-depl

- name: SIVEOINFRA/SYNCTHING - Restart service
  systemd:
    name: syncthing@{{ item }}
    state: restarted
  with_items:
    - syncthing
    - syncthing-depl

- name: SIVEOINFRA/SYNCTHING - Configure announce servers on master and assessor plugins
  command: crudini --set {{ item.file }} {{ item.section }} {{ item.parameter }} {{ SYNCTHING_DISCOVERY_URL }}
  with_items:
    - { file: '/etc/mmc/plugins/xmppmaster.ini.local', section: 'syncthing', parameter: 'announce_server' }
    - { file: '/etc/pulse-xmpp-agent-substitute/assessor_agent.ini.local', section: 'parameters', parameter: 'announce_server' }
    - { file: '/etc/mmc/plugins/assessor_agent.ini.local', section: 'parameters', parameter: 'announce_server' }
  when:
    - INSTALL_TYPE == 'p'

- name: SIVEOINFRA/SYNCTHING - Restart mmc-agent and assessor services
  systemd:
    name: "{{ item }}"
    state: restarted
  with_items:
    - mmc-agent
    - pulse-xmpp-master-substitute-assessor
  when:
    - INSTALL_TYPE == 'p'

- name: SIVEOINFRA/IPTABLES - Install packages for iptable persistance
  yum:
    state: latest
    pkg:
      - iptables-services
  when:
    - ansible_distribution == 'CentOS'
    - INSTALL_TYPE == 'p'

- name: SIVEOINFRA/IPTABLES - Install packages for iptable persistance
  apt:
    state: latest
    pkg:
      - iptables-persistent
  when:
    - ansible_distribution == 'Debian'
    - INSTALL_TYPE == 'p'

- name: SIVEOINFRA/IPTABLES - Iptables flush filter
  iptables:
    chain: "{{ item }}"
    flush: yes
  with_items:  [ 'INPUT', 'FORWARD', 'OUTPUT' ]
  when:
    - INSTALL_TYPE == 'p'

- name: SIVEOINFRA/IPTABLES - Allow inbound established,related traffic on public interface
  iptables:
    chain: INPUT
    protocol: tcp
    jump: ACCEPT
    ctstate: ESTABLISHED,RELATED
    in_interface: '{{ PUBLIC_INTERFACE_NAME }}'
  when:
    - INSTALL_TYPE == 'p'

- name: SIVEOINFRA/IPTABLES - Allow outbound established,related traffic on public interface
  iptables:
    chain: OUTPUT
    protocol: tcp
    jump: ACCEPT
    ctstate: ESTABLISHED,RELATED
    out_interface: '{{ PUBLIC_INTERFACE_NAME }}'
  when:
    - INSTALL_TYPE == 'p'

- name: SIVEOINFRA/IPTABLES - Allow specific ports in on public interface
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: '{{ item }}'
    jump: ACCEPT
    in_interface: '{{ PUBLIC_INTERFACE_NAME }}'
  with_items:
    - 22
    - 5222
    - 443
    - 9999
    - 80
    - 3306
  when:
    - INSTALL_TYPE == 'p'

- name: SIVEOINFRA/IPTABLES - Allow specific ports out on public interface
  iptables:
    chain: OUTPUT
    protocol: tcp
    destination_port: '{{ item }}'
    jump: ACCEPT
    out_interface: '{{ PUBLIC_INTERFACE_NAME }}'
  with_items:
    - 8443
    - 22067
    - 22070
    - 80
    - 443
    - 22
  when:
    - INSTALL_TYPE == 'p'

- name: SIVEOINFRA/IPTABLES - Drop other inbound traffic on public interface
  iptables:
    chain: '{{ item }}'
    jump: DROP
    in_interface: '{{ PUBLIC_INTERFACE_NAME }}'
  with_items:
    - INPUT
    - FORWARD
  when:
    - INSTALL_TYPE == 'p'

- name: SIVEOINFRA/IPTABLES - Drop other outbound traffic on public interface
  iptables:
    chain: OUTPUT
    jump: DROP
    out_interface: '{{ PUBLIC_INTERFACE_NAME }}'
  when:
    - INSTALL_TYPE == 'p'

- name: SIVEOINFRA/IPTABLES - Save iptables rules
  shell: "iptables-save > {{ IPTABLES_SAVE_PATH }}"
  when:
    - INSTALL_TYPE == 'p'

- name: SIVEOINFRA/MONITORING - Download machine agent on all Pulse servers
  get_url:
    url: 'http://{{ CLIENTS_DOWNLOADS_SERVER }}/downloads/lin/Pulse-Agent-linux-MINIMAL-latest.sh'
    dest: /tmp/Pulse-Agent-linux-MINIMAL-latest.sh
    mode: 0755
    
- name: SIVEOINFRA/MONITORING - Install machine agent on all Pulse servers
  command: /tmp/Pulse-Agent-linux-MINIMAL-latest.sh

- name: SIVEOINFRA/MONITORING - Change machine agent local tcp port to 8767
  command: crudini --set /etc/pulse-xmpp-agent/agentconf.ini kiosk am_local_port 8767
    
- name: SIVEOINFRA/MONITORING - Restart machine and relay agents
  systemd:
    enabled: yes
    name: '{{ item }}'
    state: restarted
  with_items:
    - pulse-xmpp-agent-machine
    - pulse-xmpp-agent-relay

- name: SIVEOINFRA/MONITORING - Get database password
  command: crudini --get /etc/mmc/plugins/xmppmaster.ini.local database dbpasswd
  register: DB_PASSWORD
  when:
    - INSTALL_TYPE == 'p'

- name: SIVEOINFRA/MONITORING - Configure pulsesystem monitoring plugin on main pulse
  command: crudini --set /etc/pulse-xmpp-agent/scheduling_mon_pulsesystem.ini.local {{ item.section }} {{ item.parameter }} "{{ item.value }}"
  with_items:
    - { section: 'pulse_main', parameter: 'db_password', value: '{{ DB_PASSWORD.stdout }}' }
    - { section: 'services', parameter: 'services_list', value: '"ejabberd, syncthing, apache, tomcat, ssh, openldap, mysql, mmc-agent, pulse-xmpp-agent-relay, pulse2-inventory-server, pulse2-package-server, pulse-xmpp-master-substitute-inventory, pulse-xmpp-master-substitute-registration, pulse-xmpp-master-substitute-logger, pulse-xmpp-master-substitute-monitoring, pulse-xmpp-master-substitute-assessor, pulse-xmpp-master-substitute-reconfigurator, pulse-xmpp-master-substitute-deployment, pulse-xmpp-master-substitute-subscription"' }
    - { section: 'ports', parameter: 'ports_list', value: '"ejabberd_c2s, ejabberd_s2s, syncthing_web, syncthing_discosrv, apache, tomcat, ssh, mysql, mmc_agent, pulse2_inventory_server, pulse2_package_server"' }
  when:
    - INSTALL_TYPE == 'p'

- name: SIVEOINFRA/MONITORING - Configure pulsesystem monitoring plugin on relays
  command: crudini --set /etc/pulse-xmpp-agent/scheduling_mon_pulsesystem.ini.local {{ item.section }} {{ item.parameter }} "{{ item.value }}"
  with_items:
    - { section: 'services', parameter: 'services_list', value: '"ejabberd, syncthing, apache, tomcat, ssh, mysql, pulse-xmpp-agent-relay, pulse-package-watching"' }
    - { section: 'ports', parameter: 'ports_list', value: '"ejabberd_c2s, ejabberd_s2s, syncthing_web, apache, tomcat, ssh, mysql"' }
  when:
    - INSTALL_TYPE != 'p'

- name: SIVEOINFRA/MONITORING - Install python-mysql.connector
  apt:
    name: python-mysql.connector
    state: present
    
- name: SIVEOINFRA/MONITORING - Enable accounting in systemd
  command: crudini --set /etc/systemd/system.conf Manager {{ item }} "yes"
  with_items:
    - DefaultMemoryAccounting
    - DefaultCPUAccounting
    - BlockIOAccounting
    
- name: SIVEOINFRA/MONITORING - Run systemctl daemon-reexec to serialise manager state 
  systemd:
    daemon_reexec: yes

- name: SIVEOINFRA/MONITORING - Restart all pulse services and dependencies
  command: python3 -m pulse_debug_tools server --action=manage_pulse_services --options=dryrun=no,deps=yes,only_subs='',action=restart

- name: SIVEOINFRA/MONITORING - Pause for 30 seconds to allow services to restart
  pause:
    seconds: 30

- name: SIVEOINFRA/MONITORING - Reset pulse system monitoring
  command: mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p'{{ DBADMINPASSWD }}' xmppmaster -e "{{ item }}"
  loop:
    - TRUNCATE TABLE mon_device_service
    - TRUNCATE TABLE mon_devices
    - TRUNCATE TABLE mon_event
    - DELETE FROM mon_machine
    - DELETE FROM mon_panels_template WHERE id > 1
    - TRUNCATE TABLE mon_rules
  when:
    - INSTALL_TYPE == 'p'

- name: SIVEOINFRA/MONITORING - Delete temporary monitoring files
  command: '{{ item }}'
  with_items:
    - rm -f {{PYTHON_BASEDIR}}/pulse_xmpp_agent/INFOSTMP/*.json
    - rm -rf /var/lib/pulse2/tmpprocessmonitoring/*

- name: SIVEOINFRA/MONITORING - Setup Pulse system specific monitoring
  shell: "mysql -u{{ DBADMINUSER }} -p'{{ DBADMINPASSWD }}' xmppmaster < /var/lib/pulse2/script_monitoring/schema_mon_pulsesystem.sql"
  when:
    - INSTALL_TYPE == 'p'
    
- name: SIVEOINFRA - Restart mmc-agent
  systemd:
    enabled: yes
    name: mmc-agent
    state: restarted
  when:
    - INSTALL_TYPE == 'p'

...
