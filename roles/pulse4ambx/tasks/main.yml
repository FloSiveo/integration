---

#######################################################
 - debug:
     msg: "___________________________"
 - debug:
     msg: "_____CONFIG_&_DOWNLOAD_____"
 - debug:
     msg: "___________________________"

 - name: verify if ssh key exist
   stat:
     path: /root/.ssh/id_rsa.pub
   register: sshkey

 - name: generate ssh keys
   shell: ssh-keygen -b 2048 -t rsa -f /root/.ssh/id_rsa -q -N ""
   when:
     - XMPP_DOMAIN != 'pulse'
     - not sshkey.stat.exists

 - name: fetch id_rsa.pub from pulsemain
   fetch:
     src: '/root/.ssh/id_rsa.pub'
     dest: '/tmp/pulsemain-id_rsa.pub'
     flat: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: set authorized key
   authorized_key:
     user: root
     state: present
     key: "{{ lookup('file', '/tmp/pulsemain-id_rsa.pub') }}"
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: fetch id_rsa.pub from ambox
   fetch:
     src: '/root/.ssh/id_rsa.pub'
     dest: '/tmp/{{ansible_hostname}}-id_rsa.pub'
     flat: yes
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: set authorized_key
   authorized_key:
     user: root
     state: present
     key: "{{ lookup('file', '/tmp/{{ansible_hostname}}-id_rsa.pub') }}"
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'

# Configure rbash
 - name: Create rbash shell
   file:
     src: /bin/bash
     dest: /bin/rbash
     state: link
     force: yes
   no_log: True

# Configure repos
 - name: Delete old siveo repo
   file:
     path: /etc/yum.repos.d/siveo.repo
     state: absent

 - name: Download repo file from {{ PULSE4REPO_URL }}
   get_url:
     url: '{{ PULSE4REPO_URL }}'
     dest: /etc/yum.repos.d/pulse4.repo

 - name: PREPARATION - Find out URL of SIVEO public key
   command: "grep -m1 -ir 'gpgkey=' /etc/yum.repos.d/pulse4.repo"
   register: grep_output
   ignore_errors: true
   when:
     - ansible_distribution == 'CentOS'

 - name: PREPARATION - Download SIVEO public key
   get_url:
     url: '{{ grep_output.stdout.split("=")[1] }}'
     dest: /tmp/siveo_key.asc
   when:
     - ansible_distribution == 'CentOS'

 - name: PREPARATION - Import SIVEO public key
   command: "rpm --import /tmp/siveo_key.asc"
   when:
     - ansible_distribution == 'CentOS'

 - name: Cleaning yum repo cache
   command: yum clean all

#get ip

 - name: Get IP_ADDRESS
   shell: ip addr show {{ INTERFACE }} | grep -w inet | awk '{print $2}' | cut -d "/" -f 1
   register: resultip

 - name: set IP_ADDRESS
   set_fact:
     IP_ADDRESS: "{{ resultip.stdout }}"

#get ip

 - name: Get IP_REMOTE_SERVER
   shell: ip addr show {{ INTERFACE_TO_PULSE }} | grep -w inet | awk '{print $2}' | cut -d "/" -f 1
   register: ipadressout

 - name: set IP_REMOTE_SERVER
   set_fact:
     IP_REMOTE_SERVER: '{{ ipadressout.stdout }}'

#CONFIGURE ejabberd

 - name: install_ejabberd_rh
   yum:
     name: "{{ packages_cent }}"
     update_cache: yes
     state: latest
   vars:
     packages_cent:
       - ejabberd
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"

 - name: install_crudini
   yum:
     update_cache: yes
     state: latest
     pkg:
       - crudini
   when:
     - ansible_distribution == "Rhel" or ansible_distribution == "CentOS"

#######################################################
 - debug:
     msg: "___________________________"
 - debug:
     msg: "______INSTALL_APACHE2______"
 - debug:
     msg: "___________________________"

        #INSTALL APACHE2 CENT

 - name: install_apache2
   yum:
     name: "{{ packages_cent }}"
     update_cache: yes
     state: latest
   vars:
     packages_cent:
       - httpd
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"

 - name: Create a directory /etc/systemd/system/httpd.service.d if it does not exist
   file:
     path: /etc/systemd/system/httpd.service.d
     state: directory
     mode: '0755'
   when:
     - ansible_distribution == "CentOS"

 - name: Create /etc/systemd/system/httpd.service.d/nopt.conf
   file:
     path: /etc/systemd/system/httpd.service.d/nopt.conf
     state: touch
     mode: '0755'
   when:
     - ansible_distribution == "CentOS"

 - name: copy [Service]\nPrivateTmp=false in /etc/systemd/system/httpd.service.d/nopt.conf
   copy:
     content: "[Service]\nPrivateTmp=false"
     dest: /etc/systemd/system/httpd.service.d/nopt.conf
   when:
     - ansible_distribution == "CentOS"

        #SERVICES RESTART

 - name: systemctl daemon-reload
   shell: systemctl daemon-reload

 - name: restart apache2
   systemd:
     state: restarted
     name: httpd.service
   when:
     - ansible_distribution == "CentOS"

        #SERVICES RESTART

 - name: enabled httpd
   systemd:
     enabled: yes
     name: httpd
   when:
     - ansible_distribution == "CentOS"

#######################################################
 - debug:
     msg: "___________________________"
 - debug:
     msg: "________INSTALL_PHP________"
 - debug:
     msg: "___________________________"

       #INSTALL PHP
 - name: uninstall_php
   yum:
     update_cache: yes
     pkg:
       - php-common
       - php-mysql
     state: absent
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"

 - name: install_php
   yum:
     update_cache: yes
     pkg:
       - php
       - php-fpm
       - php-mysqlnd
     state: latest
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"
   notify: [ "apache restart" ]

        #CONFIG

 - name: Update php.ini post_max_size
   replace:
     dest: "/etc/php.ini"
     regexp: '^post_max_size.*$'
     replace: 'post_max_size = 20M'
     backup: yes
   when:
     - ansible_distribution == "CentOS"

 - name: Update php.ini upload_max_filesize
   replace:
     dest: "/etc/php.ini"
     regexp: '^upload_max_filesize.*$'
     replace: 'upload_max_filesize = 20M'
     backup: yes
   when:
     - ansible_distribution == "CentOS"

 - name: Update php.ini upload_memory_limit
   replace:
     dest: "/etc/php.ini"
     regexp: '^memory_limit.*$'
     replace: 'memory_limit = 1024M'
     backup: yes
   when:
     - ansible_distribution == "CentOS"

 - name: Update php.ini short_open_tag
   replace:
     dest: "/etc/php.ini"
     regexp: '^short_open_tag.*$'
     replace: 'short_open_tag = On'
     backup: yes
   when:
     - ansible_distribution == "CentOS"

 - name: Update php.ini date_timezone
   replace:
     dest: "/etc/php.ini"
     regexp: '^;date.timezone.*$'
     replace: 'date.timezone = Europe\/Paris/'
     backup: yes
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"

        #SERVICES RESTART

 - name: restart php-fpm
   systemd:
     state: restarted
     name: php-fpm
   when:
     - ansible_distribution == "CentOS"

        #SESSION_COOKIE

 - name: Update php.ini session.cookie_httponly
   replace:
     dest: "/etc/php.ini"
     regexp: '^session.cookie_httponly.*$'
     replace: 'session.cookie_httponly = 1'
     backup: yes
   when:
     - ansible_distribution == "CentOS"

        #SERVICES RESTART

 - name: enabled php-fpm
   systemd:
     enabled: yes
     name: php-fpm
   when:
     - ansible_distribution == "CentOS"

 - name: Get version of PHP
   shell: yum list installed php | grep php | awk '{print $2}' | cut -d'-' -f1
   register: version
   changed_when: False
   when:
     - ansible_distribution == "CentOS"

 - name: set V_PHP_TEST_CENT (version of php in variable)
   set_fact:
     V_PHP_TEST_CENT: "{{ version.stdout }}"
   when:
     - ansible_distribution == "CentOS"

#######################################################
 - debug:
     msg: "___________________________"
 - debug:
     msg: "_____INSTALL_MULTISITE_____"
 - debug:
     msg: "___________________________"

 - name: install_multisite_cent (package pulse-xmpp-agent-relay)
   yum:
     name: "{{ packages_cent }}"
     update_cache: yes
     state: latest
   vars:
     packages_cent:
       - pulse-xmpp-agent-relay
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"

#######################################################
 - debug:
     msg: "___________________________"
 - debug:
     msg: "_______INSTALL_MYSQL_______"
 - debug:
     msg: "___________________________"

 - name: install_mysql
   yum:
     update_cache: yes
     state: latest
     pkg:
       - mariadb
       - mariadb-server
       - MySQL-python
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"

 - name: start mysqld
   systemd:
     name: mariadb
     state: started
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"

        #SECURE THE INSTALL

 - name: delete /var/lib/mysql
   file:
     path: /var/lib/mysql
     state: absent

 - name: delete /root/.my.cnf
   file:
     path: /root/.my.cnf
     state: absent

 - name: mysql_install_db
   shell: mysql_install_db

 - name: chown -R mysql /var/lib/mysql/
   shell: "chown -R mysql: /var/lib/mysql/"

 - name: restart service mariadb
   service:
     name: mariadb
     state: restarted

 - name: define root password for mariadb
   shell: mysqladmin -u {{ DBADMINUSER }} password '{{ DBADMINPASSWD }}'

 - name: settings for mysql-server FLUSH PRIVILEGES
   shell: echo "FLUSH PRIVILEGES" | mysql -u {{ DBADMINUSER }} -p"{{ DBADMINPASSWD }}"

 - name: settings for mysql-server DELETE FROM mysql.user WHERE User='root' AND Host NOT IN
   shell: echo "DELETE FROM mysql.user WHERE User='{{ DBADMINUSER }}' AND Host NOT IN ('localhost', '127.0.0.1', '::1')" | mysql -u {{ DBADMINUSER }} -p"{{ DBADMINPASSWD }}"

 - name: settings for mysql-server DELETE FROM mysql.user WHERE User=''"
   shell: echo "DELETE FROM mysql.user WHERE User=''" | mysql -u {{ DBADMINUSER }} -p"{{ DBADMINPASSWD }}"

 - name: settings for mysql-server DELETE FROM mysql.db WHERE Db='test' OR Db='test\_%'"
   shell: echo "DELETE FROM mysql.db WHERE Db='test' OR Db='test\_%'" | mysql -u {{ DBADMINUSER }} -p"{{ DBADMINPASSWD }}"

 - name: settings for mysql-server FLUSH PRIVILEGES
   shell: echo "FLUSH PRIVILEGES" | mysql -u {{ DBADMINUSER }} -p"{{ DBADMINPASSWD }}"

#######################################################
 - debug:
     msg: "___________________________"
 - debug:
     msg: "_______INSTALL_XMPP________"
 - debug:
     msg: "___________________________"

 - name: Get hostname
   shell: hostname -s
   register: result

 - name: set xmppDomain to hostname
   set_fact:
     XMPP_DOMAIN: "{{ result.stdout }}"


 - name: enable ejabberd
   service:
     name: ejabberd
     enabled: yes

 - name: service stop ejabberd
   service:
     name: ejabberd
     state: stopped
   when:
     - ansible_distribution == "Rhel" or ansible_distribution == "CentOS"

 - name: usermod rhel ejabberd -d /var/lib/ejabberd
   shell: "usermod ejabberd -d /var/lib/ejabberd"
   when:
     - ansible_distribution == "Rhel" or ansible_distribution == "CentOS"

 - name: service ejabberd start
   service:
     name: ejabberd
     state: started
   when:
     - ansible_distribution == "Rhel" or ansible_distribution == "CentOS"

 - name: Set XMPP domain in ejabberd.yml
   shell: 'sed -i "/^hosts:$/{n;s/.*/\ \ - \"{{ XMPP_DOMAIN }}\"/}" /etc/ejabberd/ejabberd.yml'
   when:
     - ansible_distribution == "Rhel" or ansible_distribution == "Mageia" or ansible_distribution == "CentOS"

 - name: sed -i /etc/ejabberd/ejabberd.yml usermod ejabberd
   shell: 'sed -i "/^acl:/a\ \ admin: \n \ \ \ user : \n \ \ \ \ \ - "root@{{ XMPP_DOMAIN }}"" /etc/ejabberd/ejabberd.yml'
   when:
     - ansible_distribution == "Rhel" or ansible_distribution == "Mageia" or ansible_distribution == "CentOS"

 - name: sed -i /etc/ejabberd/ejabberd.yml usermod ejabberd
   shell: 'sed -i "s/starttls: true/starttls: false/" /etc/ejabberd/ejabberd.yml'
   when:
     - ansible_distribution == "Rhel" or ansible_distribution == "Mageia" or ansible_distribution == "CentOS"

 - name: restart service ejabberd
   systemd:
     name: ejabberd
     state: restarted

#######################################################
 - debug:
     msg: "___________________________"
 - debug:
     msg: "________CONFIG_XMPP________"
 - debug:
     msg: "___________________________"


 - name: Get hostname
   shell: hostname -s
   register: result

 - name: set xmppDomain to hostname
   set_fact:
     XMPP_DOMAIN: "{{ result.stdout }}"

 - name: stop ejabberd
   service:
     name: ejabberd
     state: stopped

 - name: shell /bin/rm -rf /var/lib/ejabberd/*
   shell: "/bin/rm -rf /var/lib/ejabberd/*"

# else Debian

 - name: start ejabberd
   service:
     name: ejabberd
     state: started
   when:
     - ansible_distribution != "Debian"

 - pause:
     seconds: 2
   when:
     - ansible_distribution != "Debian"

 - name: shell /bin/cp -fv /var/lib/ejabberd/.erlang.cookie /root/.erlang.cookie
   shell: "/bin/cp -fv /var/lib/ejabberd/.erlang.cookie /root/.erlang.cookie"
   when:
     - ansible_distribution != "Debian"

 - name: Change file ownership, group of /root/.erlang.cookie
   file:
     path: /root/.erlang.cookie
     owner: root
     group: root
   when:
     - ansible_distribution != "Debian"

 - pause:
     seconds: 2
   when:
     - ansible_distribution != "Debian"

 - name: ejabctl register master root
   shell: ejabberdctl register root {{ XMPP_DOMAIN }} "{{ ROOT_PASSWORD }}"
   when:
     - ansible_distribution != "Debian"

 - pause:
     seconds: 5
   when:
     - ansible_distribution != "Debian"

    # Configure a few details

 - name: shell multiline sed -i /etc/ejabberd/ejabberd.yml
   shell: |
    sed -i 's/^##[[:space:]]registration_timeout:.*$/registration_timeout: infinity/' /etc/ejabberd/ejabberd.yml
    sed -i '/^[[:space:]]*muc_create:/{n;s/allow:.*$/allow: admin/}' /etc/ejabberd/ejabberd.yml
    sed -i '/^[[:space:]]*mod_muc:/{n;n;n;s/allow.*/allow: local/}' /etc/ejabberd/ejabberd.yml
    sed -i '/^[[:space:]]*trusted_network:/{n;s/allow:.*$/allow: all/}' /etc/ejabberd/ejabberd.yml
    sed -i '/^[[:space:]]*## mod_register:/{s/## //}' /etc/ejabberd/ejabberd.yml
    sed -i '/^[[:space:]]*##[[:space:]]*ip_access: trusted_network/{s/## //}' /etc/ejabberd/ejabberd.yml
    sed -i 's/max_stanza_size:.*$/max_stanza_size: 8388608/' /etc/ejabberd/ejabberd.yml
    sed -i 's/max_fsm_queue:.*$/max_fsm_queue: 5000/' /etc/ejabberd/ejabberd.yml
    sed -i 's/^[[:space:]]*normal:.*$/ normal: 100000000/' /etc/ejabberd/ejabberd.yml
    sed -i 's/^[[:space:]]*fast:.*$/ fast: 1000000000/' /etc/ejabberd/ejabberd.yml
    sed -i '/^[[:space:]]*##[[:space:]]*welcome_message:/{s/## //}' /etc/ejabberd/ejabberd.yml
    sed -i '/^[[:space:]]*##[[:space:]]*subject:/{s/## //;s/subject:.*$/subject: ""/}' /etc/ejabberd/ejabberd.yml

 - name: shell multiline sed -i /etc/ejabberd/ejabberd.yml
   shell: |
    sed -i '/^[[:space:]]*subject.*/{s/## //;s/subject:.*$/subject: ""/}' /etc/ejabberd/ejabberd.yml
    sed -i  '/^[[:space:]]*body.*/{s/## //;s/body:.*$/body: ""/}' /etc/ejabberd/ejabberd.yml
    sed -i '/body: ""/ {n;N; s/^/    ##/gm }' /etc/ejabberd/ejabberd.yml
   when:
     - ansible_distribution != "Debian"

    # Add the necessary modules

 - name: shell multiline sed -i /etc/ejabberd/ejabberd.yml
   shell: |
    sed -i '/^[[:space:]]*##[[:space:]]*certfile:/{s/## //;s///}' /etc/ejabberd/ejabberd.yml
    sed -i '/^[[:space:]]*##[[:space:]]*starttls:/{s/## //;s///}' /etc/ejabberd/ejabberd.yml

 - name: service ejabberd restart
   service:
     name: ejabberd
     state: restarted

 - pause:
     seconds: 3

#######################################################
 - debug:
     msg: "___________________________"
 - debug:
     msg: "_____INSTALL_GUACAMOLE_____"
 - debug:
     msg: "___________________________"

 - name: Install packages for guacamole
   yum:
     pkg:
       - guacamole
       - guacd
       - libguac-client-vnc
       - libguac-client-ssh
       - libguac-client-rdp
       - guacamole-auth-mysql
       - mysql-connector-java
       - xmlstarlet
     state: present
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"

 - name: Get version of tomcat
   shell: basename /etc/default/tomcat*
   register: versionTC
   changed_when: False
   when:
     - ansible_distribution == "CentOS"

 - name: set version of tomcat in V_TOMCAT_TEST_CENT
   set_fact:
     V_TOMCAT_TEST_CENT: "{{ versionTC.stdout }}"
   when:
     - ansible_distribution == "CentOS"

#RHEL or CentOS
 - name: Check if /etc/default/{{ V_TOMCAT_TEST_CENT }} exist
   stat:
     path: /etc/default/{{ V_TOMCAT_TEST_CENT }}
   register: stat_result
   when:
     - ansible_distribution == "Rhel" or ansible_distribution == "CentOS"

 - name: after Check echo "" in /etc/default/{{ V_TOMCAT_TEST_CENT }}
   shell: 'echo "" >> /etc/default/{{ V_TOMCAT_TEST_CENT }}'
   when:
     - ansible_distribution == "Rhel" or ansible_distribution == "CentOS"
     - not stat_result.stat.exists

 - name: after Check write in /etc/default/{{ V_TOMCAT_TEST_CENT }}
   lineinfile:
     line: 'GUACAMOLE_HOME=/etc/guacamole'
     dest: '/etc/default/{{ V_TOMCAT_TEST_CENT }}'
   when:
     - ansible_distribution == "Rhel" or ansible_distribution == "CentOS"
     - not stat_result.stat.exists

 - name: after Check write in /etc/default/{{ V_TOMCAT_TEST_CENT }}
   lineinfile:
     line: '# Guacamole env variable'
     dest: '/etc/default/{{ V_TOMCAT_TEST_CENT }}'
   when:
     - ansible_distribution == "Rhel" or ansible_distribution == "CentOS"
     - not stat_result.stat.exists

#RESTART AND ENABLED SERVICES

 - name: enabled tomcat
   systemd:
     enabled: yes
     name: tomcat
   when:
     - ansible_distribution == "Rhel" or ansible_distribution == "CentOS"

 - name: enabled guacd
   systemd:
     enabled: yes
     name: guacd

 - name: restarted tomcat
   systemd:
     state: restarted
     name: tomcat
   when:
     - ansible_distribution == "Rhel" or ansible_distribution == "CentOS"

 - name: restarted guacd
   systemd:
     state: restarted
     name: guacd

#######################################################
 - debug:
     msg: "___________________________"
 - debug:
     msg: "______CONFIG_GUACAMOLE_____"
 - debug:
     msg: "___________________________"


 - name: Get hostname
   shell: hostname -s
   register: result

 - name: set xmppDomain to hostname
   set_fact:
     XMPP_DOMAIN: "{{ result.stdout }}"

 - name: set GUACAMOLE_ROOT_PASSWORD
   set_fact:
     GUACAMOLE_ROOT_PASSWORD: 'pwgen --secure 40 1'

 - name: check if /etc/guacamole/guacamole.properties.bak exist
   stat:
     path: /etc/guacamole/guacamole.properties.bak
   register: stfile

 - name: shell /bin/cp /etc/guacamole/guacamole.properties /etc/guacamole/guacamole.properties.bak
   shell: "/bin/cp /etc/guacamole/guacamole.properties /etc/guacamole/guacamole.properties.bak"
   when: stfile.stat.isreg is not defined

#drop database

 - name: DROP DATABASE
   shell: 'echo "DROP DATABASE IF EXISTS guacamole;" | mysql -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }}'
   when:
     - ansible_distribution == "CentOS"

#drop user

 - name: DROP USER
   shell: echo "DELETE FROM mysql.user WHERE user='guacamole';" | mysql -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }}
   when:
     - ansible_distribution == "CentOS"

 - name: DROP USER
   shell: echo "FLUSH PRIVILEGES;" | mysql -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }}
   when:
     - ansible_distribution == "CentOS"

#create database

 - name: CREATE DATABASE
   shell: echo "CREATE DATABASE guacamole;" | mysql -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }}
   when:
     - ansible_distribution == "CentOS"

#create user

 - name: CREATE USER
   shell: echo "CREATE USER 'guacamole'@'localhost' IDENTIFIED BY '{{ ROOT_PASSWORD }}';" | mysql -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }}
   when:
     - ansible_distribution == "CentOS"

#grant

 - name: GRANT
   shell: echo "GRANT SELECT,INSERT,UPDATE,DELETE ON guacamole.* TO 'guacamole'@'localhost';" | mysql -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }}
   when:
     - ansible_distribution == "CentOS"

# if debian version 8

 - name: Create schema
   shell: "mysql -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} guacamole < /usr/share/guacamole-auth-mysql/schema/001-create-schema.sql;"
   when: ansible_distribution_major_version == '8'

 - name: Create admin user
   shell: "mysql -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} guacamole < /usr/share/guacamole-auth-mysql/schema/002-create-admin-user.sql;"
   when: ansible_distribution_major_version == '8'

 - name: Create schema
   shell: "mysql -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} guacamole < /usr/share/guacamole-auth-jdbc/mysql/schema/001-create-schema.sql;"
   when: ansible_distribution_major_version != '8'

 - name: Create admin user
   shell: "mysql -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} guacamole < /usr/share/guacamole-auth-jdbc/mysql/schema/002-create-admin-user.sql;"
   when: ansible_distribution_major_version != '8'

 - name: SET @salt = UNHEX(SHA2(UUID(), 256)); UPDATE guacamole_user SET username='root', password_salt=@salt, password_hash=UNHEX(SHA2(CONCAT('{{ GUACAMOLE_ROOT_PASSWORD }}'
   shell: echo "SET @salt = UNHEX(SHA2(UUID(), 256)); UPDATE guacamole_user SET username='root', password_salt=@salt, password_hash=UNHEX(SHA2(CONCAT('{{ GUACAMOLE_ROOT_PASSWORD }}', HEX(@salt)), 256)) WHERE user_id=1;" | mysql -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} guacamole

 - name: check if /etc/guacamole/guacamole.properties.bak is defined
   stat:
     path: /etc/guacamole/guacamole.properties.bak
   register: stfiletwo

 - name: shell /bin/cp /etc/guacamole/guacamole.properties.bak /etc/guacamole/guacamole.properties
   shell: "/bin/cp /etc/guacamole/guacamole.properties.bak /etc/guacamole/guacamole.properties"
   when: stfiletwo.stat.isreg is defined

 - name: check if /etc/guacamole/lib is defined
   stat:
     path: /etc/guacamole/lib
   register: std

 - name: creat directory /guacamole/lib
   file:
     path: /etc/guacamole/lib
     state: directory
   when:
     - stfiletwo.stat.isdir is defined
     - ansible_distribution == "Rhel" or ansible_distribution == "CentOS"

 - name: shell /bin/cp -f /usr/share/java/mysql-connector-java.jar /etc/guacamole/lib/
   shell: "/bin/cp -f /usr/share/java/mysql-connector-java.jar /etc/guacamole/lib/"
   when:
     - stfiletwo.stat.isdir is defined
     - ansible_distribution == "Rhel" or ansible_distribution == "CentOS"


#wirte in file guacamole.properties

 - name: shell sed -i in /etc/guacamole/guacamole.properties
   shell: "sed -i '/^basic-user-mapping.*$/d' /etc/guacamole/guacamole.properties"

 - name: shell sed -i in /etc/guacamole/guacamole.properties
   shell: "sed -i '/^mysql-.*$/d' /etc/guacamole/guacamole.properties"

 - name: shell sed -i in /etc/guacamole/guacamole.properties
   shell: "sed -i '/^lib-directory:.*$/d' /etc/guacamole/guacamole.properties"

 - name: shell sed -i in /etc/guacamole/guacamole.properties
   shell: "sed -i '/^noauth-config:.*$/d' /etc/guacamole/guacamole.properties"

# wite in file /etc/guacamole/guacamole.properties for all

 - name: write mysql parameters in file /etc/guacamole/guacamole.properties
   lineinfile:
     dest: /etc/guacamole/guacamole.properties
     line: '{{ item }}'
   with_items:
    - 'mysql-disallow-simultaneous-connections: false'
    - 'mysql-disallow-duplicate-connections: false'
    - 'lib-directory: /var/lib/guacamole/classpath'
    - 'mysql-hostname: localhost'
    - 'mysql-port: 3306'
    - 'mysql-database: guacamole'
    - 'mysql-username: guacamole'
    - 'mysql-password: {{ ROOT_PASSWORD }}'

    # Setup Tomcat

 - name: shell sed -i in /etc/tomcat/server.xml
   shell: sed -i 's/Connector port="8080"/Connector port="8081"/' /etc/tomcat/server.xml
   when:
     - ansible_distribution == "CentOS"

 - name: shell xmlstarlet /etc/tomcat/server.xml
   shell: |
     xmlstarlet ed --inplace -s "Server[@port='8005']/Service[@name='Catalina']/Engine[@name='Catalina']/Host[@name='localhost']" -t elem -n "Valve className=\"org.apache.catalina.valves.RemoteAddrValve\" allow=\"{{ IP_ADDRESS }}\"" /etc/tomcat/server.xml
   when:
     - INSTALL_TYPE == "p"
     - ansible_distribution == "CentOS"

 - name: shell xmlstarlet /etc/tomcat/server.xml
   shell: |
     xmlstarlet ed --inplace -s "Server[@port='8005']/Service[@name='Catalina']/Engine[@name='Catalina']/Host[@name='localhost']" -t elem -n "Valve className=\"org.apache.catalina.valves.RemoteAddrValve\" allow=\"{{ PULSEMAIN_IP }}\"" /etc/tomcat/server.xml
   when:
     - INSTALL_TYPE != "p"
     - ansible_distribution == "CentOS"

 - name: service tomcat restart
   service:
     name: 'tomcat'
     state: restarted
   when:
     - ansible_distribution == "CentOS"

 - name: set GUACAMOLE_ROOT_PASSWORD
   set_fact:
     GUACAMOLE_APACHE_PATH: '/etc/httpd/conf.d/guacamole.conf'
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"

#### IF INSTALL_TYPE=P
#######################################

 - name: shell hostname f
   shell: hostname -f
   register: hostout
   when:
     - INSTALL_TYPE == "p"

 - name: set xmppDomain to hostname -f
   set_fact:
     HOSTNAME_F: '{{ hostout.stdout }}'
   when:
     - INSTALL_TYPE == "p"

 - name: set xmppDomain to hostname -f
   set_fact:
     GUACAMOLE_APACHE_PATH: '/etc/httpd/conf.d/guacamole.conf'

 - name: copy <Location /guacamole/>... and <Location /guacamole/websocket-tunnel> in {{ GUACAMOLE_APACHE_PATH }}
   copy:
     content: |
        <Location /guacamole/>
            SetEnvIf Referer "^https?://{{ SERVER_FQDN }}/" GUACAMOLE_ALLOWED
            Order Deny,Allow
            Deny from all
            Allow from env=GUACAMOLE_ALLOWED
            ProxyPass http://{{ HOSTNAME_F }}:8081/guacamole/ max=20 flushpackets=on
            ProxyPassReverse http://{{ HOSTNAME_F }}:8081/guacamole/
        </Location>
        <Location /guacamole/websocket-tunnel>
            SetEnvIf Referer "^https?://{{ SERVER_FQDN }}/" GUACAMOLE_ALLOWED
            Order Deny,Allow
            Deny from all
            Allow from env=GUACAMOLE_ALLOWED
            ProxyPass ws://{{ HOSTNAME_F }}:8081/guacamole/websocket-tunnel
            ProxyPassReverse ws://{{ HOSTNAME_F }}:8081/guacamole/websocket-tunnel
        </Location>
        SetEnvIf Request_URI "^/guacamole/tunnel" dontlog
        CustomLog  /var/log/httpd/guac.log common env=!dontlog
     dest: '{{ GUACAMOLE_APACHE_PATH }}'
   when:
     - ansible_distribution == "CentOS"
     - INSTALL_TYPE == "p"

 - name: a2enconf guacamole.conf
   shell: 'a2enconf guacamole.conf'
   when:
     - ansible_distribution == "CentOS"
     - INSTALL_TYPE == "p"

######## IF INSTALL_TYPE != P
##################################

#else INSTALL_TYPE != p

 - name: Ansible check file exists example.
   stat:
     path: /etc/httpd/conf.d
   register: file_details
   delegate_to: '{{ PULSEMAIN_IP }}'

 - name: copy <Location /guacamole-{{ XMPP_DOMAIN }}/>... and <Location /guacamole-{{ XMPP_DOMAIN }}/websocket-tunnel>... in {{ GUACAMOLE_APACHE_PATH }}
   copy:
     content: |
        <Location /guacamole-{{ XMPP_DOMAIN }}/>
            SetEnvIf Referer "^https?://{{ PULSEMAIN_FQDN }}/" GUACAMOLE_ALLOWED
            Order Deny,Allow
            Deny from all
            Allow from env=GUACAMOLE_ALLOWED
            ProxyPass http://{{ XMPP_DOMAIN }}:8081/guacamole/ max=20 flushpackets=on
            ProxyPassReverse http://{{ XMPP_DOMAIN }}:8081/guacamole/
            ProxyPassReverseCookiePath /guacamole/ /guacamole-{{ XMPP_DOMAIN}}/
        </Location>
        <Location /guacamole-{{ XMPP_DOMAIN }}/websocket-tunnel>
            SetEnvIf Referer "^https?://{{ PULSEMAIN_FQDN }}/" GUACAMOLE_ALLOWED
            Order Deny,Allow
            Deny from all
            Allow from env=GUACAMOLE_ALLOWED
            ProxyPass ws://{{ XMPP_DOMAIN }}:8081/guacamole/websocket-tunnel
            ProxyPassReverse ws://{{ XMPP_DOMAIN }}:8081/guacamole/websocket-tunnel
            ProxyPassReverseCookiePath /guacamole/ /guacamole-{{XMPP_DOMAIN }}/
        </Location>
     dest: '{{ GUACAMOLE_APACHE_PATH }}'
   delegate_to: '{{ PULSEMAIN_IP }}'
   ignore_errors: yes
   when:
     - INSTALL_TYPE != "p"
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"
     - file_details.stat.exists

 - name: Check if Service httpd Exists
   stat: path=/etc/init.d/httpd
   register: service_status
   delegate_to: '{{ PULSEMAIN_IP }}'

 - name: restart apache
   systemd:
     name: httpd
     state: restarted
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"
     - INSTALL_TYPE != "p"
     - service_status.stat.exists

#######################################################
 - debug:
     msg: "___________________________"
 - debug:
     msg: "_____INSTALL_SYNCTHING_____"
 - debug:
     msg: "___________________________"


 - name: Get hostname
   shell: hostname -s
   register: result

 - name: set xmppDomain to hostname
   set_fact:
     SERVER: "{{ result.stdout }}"

        #INSTALL SYNCTHING

 - name: install_syncthing
   yum:
     name: syncthing
     state: latest
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"

     # Delete syncthing folders if already present

 - name: Remove file (delete file) /var/lib/syncthing/.config
   file:
     path: /var/lib/syncthing/.config
     state: absent

 - name: Remove file /var/lib/syncthing/Sync
   file:
     path: /var/lib/syncthing/Sync
     state: absent

 - name: Remove file /var/lib/syncthing-depl/.config
   file:
     path: /var/lib/syncthing-depl/.config
     state: absent

 - name: Remove file /var/lib/syncthing-depl/Sync
   file:
     path: /var/lib/syncthing-depl/Sync
     state: absent

     # Create a syncthing unprivileged account for general synch

 - name: Create a syncthing unprivileged account for general synch with home /var/lib/syncthing
   user:
     name: syncthing
     state: present
     createhome: yes
     home: /var/lib/syncthing
     shell: /bin/false
     system: yes

 - name: Make sure a service is running syncthing@syncthing
   systemd:
     enabled: yes
     name: syncthing@syncthing.service

 - name: Make syncthing@syncthing restarted
   systemd:
     state: restarted
     name: syncthing@syncthing.service

# Pause for 5 minutes to build app cache.
 - pause:
     seconds: 5

     # Create a syncthing unprivileged account for deployment

 - name: Create a syncthing unprivileged account for deployment with home /var/lib/syncthing-depl
   user:
     name: syncthing-depl
     state: present
     createhome: yes
     home: /var/lib/syncthing-depl
     shell: /bin/false
     system: yes

 - name: Make sure a syncthing@syncthing-depl is running
   systemd:
     enabled: yes
     name: syncthing@syncthing-depl.service

 - name: Make syncthing@syncthing-depl restarted
   systemd:
     state: restarted
     name: syncthing@syncthing-depl.service

# Pause for 5 minutes to build app cache.
 - pause:
     seconds: 5

# Create a backup of the config files

 - name: create backup /bin/cp /var/lib/syncthing/.config/syncthing/config.xml /var/lib/syncthing/.config/syncthing/config.xml.orig
   shell: "/bin/cp /var/lib/syncthing/.config/syncthing/config.xml /var/lib/syncthing/.config/syncthing/config.xml.orig"

 - name: create backup /bin/cp /var/lib/syncthing-depl/.config/syncthing/config.xml /var/lib/syncthing-depl/.config/syncthing/config.xml.orig
   shell: "/bin/cp /var/lib/syncthing-depl/.config/syncthing/config.xml /var/lib/syncthing-depl/.config/syncthing/config.xml.orig"

        #INSTALL SYNCTHING_MANAGER

 - name: install_syncthingmanager
   yum:
     update_cache: yes
     name: syncthingmanager
     state: latest
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"

# add other install syncthing

 - name: install_syncthing_other
   yum:
     name: "{{ packages_cent }}"
     update_cache: yes
     state: latest
   vars:
     packages_cent:
       - syncthing-tools
       - syncthing-systemd-addons
       - xmlstarlet
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"
     - SERVER == "pulse"

#######################################################
 - debug:
     msg: "___________________________"
 - debug:
     msg: "_____CONFIG_SYNCTHING______"
 - debug:
     msg: "___________________________"


 - name: Get hostname
   shell: hostname -s
   register: result

 - name: set xmppDomain to hostname
   set_fact:
     XMPP_DOMAIN: "{{ result.stdout }}"

 - name: set LOCAL_DEVICE_ID (config_syncthing)
   set_fact:
     LOCAL_DEVICE_ID: syncthing -home=/var/lib/syncthing/.config/syncthing/ -device-id

 - shell: '{{ LOCAL_DEVICE_ID }}'
   register: deviceid

 - name: set LOCAL_DEVICE_ID
   set_fact:
     LOCAL_DEVICE_ID: '{{ deviceid.stdout }}'


 - name: set SYNCTHING_APACHE_PATH
   set_fact:
     SYNCTHING_APACHE_PATH: '/etc/httpd/conf.d/syncthing.conf'
   when:
     - ansible_distribution != "Debian"

# Configure Apache for syncthing

 - name: Setup syncthing write <Location /syncthing/> in {{ SYNCTHING_APACHE_PATH }}
   copy:
     content: |
       ProxyPass /syncthing/ http://localhost:8384/
       <Location /syncthing/>
           ProxyPassReverse http://localhost:8384/
           Require all granted
       </Location>
     dest: '{{ SYNCTHING_APACHE_PATH }}'

 - name: reload apache2
   systemd:
     name: httpd
     state: reloaded
   when:
     - ansible_distribution != "Debian"

## IF XMPP_DOMAIN != PULSE

 - name: set SYNCTHING_APACHE_PATH
   set_fact:
     SYNCTHING_APACHE_PATH: '/etc/httpd/conf.d/syncthing.conf'
   when:
     - ansible_distribution != "Debian"

 - name: Setup syncthing write <Location /syncthing-{{ XMPP_DOMAIN }}/> in {{ SYNCTHING_APACHE_PATH }}
   lineinfile:
     dest: '{{ SYNCTHING_APACHE_PATH }}'
     line: '{{ item }}'
   with_items:
     - "ProxyPass /syncthing-{{ XMPP_DOMAIN }}/ http://{{ XMPP_DOMAIN }}/syncthing/"
     - "<Location /syncthing-{{ XMPP_DOMAIN }}/>"
     - "    ProxyPassReverse http://{{ XMPP_DOMAIN }}/syncthing/"
     - "    Require all granted"
     - "</Location>\n"
   delegate_to: '{{ PULSEMAIN_IP }}'
   ignore_errors: yes
   when:
     - XMPP_DOMAIN != 'pulse'
     - ansible_distribution == "CentOS"

## for Rhel

 - name: check if /etc/httpd/conf.d exist
   stat:
     path: /etc/httpd/conf.d
   register: file_details
   delegate_to: '{{ PULSEMAIN_IP }}'


 - name: Check if Service httpd Exists
   stat: path=/etc/init.d/httpd
   register: service_status
   delegate_to: '{{ PULSEMAIN_IP }}'

 - name: reload httpd
   systemd:
     name: httpd
     state: reloaded
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"
     - service_status.stat.exists

## end delegate to

 - name: start syncthing.discosrv
   systemd:
     name: syncthing.discosrv
     state: started
   when:
     - XMPP_DOMAIN == 'pulse'

# Stop syncthing service

 - name: stop syncthing@syncthing
   systemd:
     name: syncthing@syncthing
     state: stopped

# Use the local discovery server

 - name: xmlstarlet define global announce server as localhost
   shell: xmlstarlet ed --inplace -u "configuration/options/globalAnnounceServer" -v "https://localhost:8443/?id={{ LOCAL_DEVICE_ID }}" /var/lib/syncthing/.config/syncthing/config.xml
   when:
     - XMPP_DOMAIN == 'pulse'

# Find pulsemain device id

# TO DELEGATE
 - name: get pulsemain device id
   shell: syncthing -home=/var/lib/syncthing/.config/syncthing/ -device-id
   delegate_to: '{{ PULSEMAIN_IP }}'
   register: resid
   when:
     - XMPP_DOMAIN != "pulse"

 - name: set PULSEMAIN_DEVICE_ID (config_syncthing - delagate_to pulsemain)
   set_fact:
     PULSEMAIN_DEVICE_ID: '{{ resid.stdout }}'
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != "pulse"

 - debug:
     msg: '{{ PULSEMAIN_DEVICE_ID }}'

 - name: xmlstarlet define global announce server
   shell: xmlstarlet ed --inplace -u "configuration/options/globalAnnounceServer" -v "https://{{ PULSEMAIN_FQDN }}:8443/?id={{ PULSEMAIN_DEVICE_ID }}" /var/lib/syncthing/.config/syncthing/config.xml
   when:
     - XMPP_DOMAIN != 'pulse'
#END DELEGATE TO


    # Disable use of syncthing relays and local announce

 - name: xmlstarlet disable relays
   shell: xmlstarlet ed --inplace -u "configuration/options/relaysEnabled" -v "false" /var/lib/syncthing/.config/syncthing/config.xml

 - name: xmlstarlet disable local announce
   shell: xmlstarlet ed --inplace -u "configuration/options/localAnnounceEnabled" -v "false" /var/lib/syncthing/.config/syncthing/config.xml

# Setup a username and password for accessing syncthing

 - name: xmlstarlet add root user
   shell: xmlstarlet ed --inplace -s "configuration/gui" -t elem -n user -v root /var/lib/syncthing/.config/syncthing/config.xml

 - name: set ENCRYPTED_PASS
   set_fact:
     ENCRYPTED_PASS: $(htpasswd -bnBC 10 "" {{ ROOT_PASSWORD }} | tr -d ':\n' | sed 's/$2y/$2a/')

 - name: xmlstarlet set root password
   shell: xmlstarlet ed --inplace -s "configuration/gui" -t elem -n password -v {{ ENCRYPTED_PASS }} /var/lib/syncthing/.config/syncthing/config.xml

# Restart syncthing service

 - name: restarted syncthing@syncthing
   systemd:
     name: syncthing@syncthing
     state: restarted

 - pause:
     seconds: 5

    # Configure syncthingmanager

 - name: set apikey
   set_fact:
     API_KEY: '$(xmlstarlet sel -t -v "configuration/gui/apikey" /var/lib/syncthing/.config/syncthing/config.xml)'

 - name: stman configure apikey
   shell: 'stman configure -k {{ API_KEY }}'

# Change the name to use the same as the XMPP domain

 - name: stman device edit -n {{ XMPP_DOMAIN }} {{ LOCAL_DEVICE_ID }}
   shell: 'stman device edit -n {{ XMPP_DOMAIN }} {{ LOCAL_DEVICE_ID }}'

    # Add device to pool if relay server
    # Add device to pool on pulsemain

 - name: stman device add (config_syncthing - delagate_to pulsemain)
   shell: 'stman device add --name {{ XMPP_DOMAIN }} --address tcp://{{ IP_ADDRESS }}:22000 {{ LOCAL_DEVICE_ID }}'
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'

# Find pulsemain device id

 - name: get pulsemain device id
   shell: 'syncthing -home=/var/lib/syncthing/.config/syncthing/ -device-id'
   delegate_to: '{{ PULSEMAIN_IP }}'
   register: deviceout
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: set PULSEMAIN_DEVICE_ID
   set_fact:
     PULSEMAIN_DEVICE_ID: '{{ deviceout.stdout }}'
   when:
     - XMPP_DOMAIN != 'pulse'

# Add pulsemain to local pool

 - name: stman device add --name --address --introducer (Add pulsemain to local pool)
   shell: stman device add --name pulse --address tcp://{{ PULSEMAIN_IP }}:22000 --introducer {{ PULSEMAIN_DEVICE_ID }}
   when:
     - XMPP_DOMAIN != 'pulse'

 # Auto-accept shares coming from pulsemain

 - name: xmlstarlet auto-accept shares coming from pulsemain
   shell: xmlstarlet ed --inplace -u "configuration/device[@id='{{ PULSEMAIN_DEVICE_ID }}']/autoAcceptFolders" -v true /var/lib/syncthing/.config/syncthing/config.xml
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: restart syncthing@syncthing
   systemd:
     name: syncthing@syncthing
     state: restarted
   when:
     - XMPP_DOMAIN != 'pulse'

 - pause:
     seconds: 10
   when:
     - XMPP_DOMAIN != 'pulse'

    # Delete the default share

 - name: stman folder remove "Default Folder"'
   shell: 'stman folder remove "Default Folder"'

#######################################################
 - debug:
     msg: "_________________________________"
 - debug:
     msg: "_CONFIG_SYNCTHING_SHARE_PACKAGES_"
 - debug:
     msg: "_________________________________"

 - name: Get hostname
   shell: hostname -s
   register: result

 - name: set xmppDomain to hostname
   set_fact:
     XMPP_DOMAIN: "{{ result.stdout }}"

 - name: get local device-id
   shell: syncthing -home=/var/lib/syncthing/.config/syncthing/ -device-id
   register: localdeviceid

 - name: set LOCAL_DEVICE_ID
   set_fact:
     LOCAL_DEVICE_ID: "{{ localdeviceid.stdout }}"

##########################################################
#                         Checks                         #
##########################################################

 - name: Check if share is already configured
   shell: xmlstarlet sel -t -c "configuration/folder[@id='pulsemaster_packages']/device[@id='{{ LOCAL_DEVICE_ID }}']" /var/lib/syncthing/.config/syncthing/config.xml |wc -c
   register: xmlout
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: set SHARE_CONFIGURED
   set_fact:
     SHARE_CONFIGURED: "{{ xmlout.stdout }}"
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: Unshare packages folder from main pulse
   shell: stman folder unshare pulsemaster_packages {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - SHARE_CONFIGURED == '1'
     - XMPP_DOMAIN != 'pulse'

 - pause:
     seconds: 20
   when:
     - SHARE_CONFIGURED == '1'
     - XMPP_DOMAIN != 'pulse'

 - name: Remove /var/lib/pulse2/packages if present
   file:
     path: /var/lib/pulse2/packages
     state: absent
   when:
     - XMPP_DOMAIN != 'pulse'

##########################################################

 - name: delete /var/lib/syncthing/packages if present
   file:
     path: /var/lib/syncthing/packages
     state: absent

 - name: create /telediffusion/4 directory
   file:
     path: /telediffusion/4
     state: directory

 - name: install acl
   apt:
     update_cache: yes
     state: latest
     pkg:
       - acl
   when:
     - ansible_distribution == "Debian" or ansible_distribution == "Mageia"

 - name: Fix permissions on telediffusion/4 dir
   shell: setfacl -Rdm g:syncthing:rwx /telediffusion/4

 - name: Fix permissions on telediffusion/4 dir
   shell: setfacl -Rm g:syncthing:rwx /telediffusion/4

 - name: Create a symbolic link
   file:
     src: /telediffusion/4
     dest: /var/lib/pulse2/packages
     owner: syncthing
     group: syncthing
     state: link

 - name: Create packages syncthing share on main pulse
   shell: stman folder add --label packages --foldertype readonly /var/lib/pulse2/packages/ pulsemaster_packages
   when:
     - XMPP_DOMAIN == 'pulse'

#######DELEGATE TO

 - name: Share packages folder to local relay from main pulse
   shell: stman folder share pulsemaster_packages {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - SHARE_ADDED == '0'
     - XMPP_DOMAIN != 'pulse'

 - pause:
     seconds: 20

 - name: Check if share is added
   shell: xmlstarlet sel -t -c "configuration/folder[@id='pulsemaster_packages']/device[@id='{{ LOCAL_DEVICE_ID }}']" /var/lib/syncthing/.config/syncthing/config.xml |wc -c
   register: xmlout
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: set SHARE_ADDED
   set_fact:
     SHARE_ADDED: "{{ xmlout.stdout }}"
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: If share is not added, unshare packages folder from main pulse
   shell: stman folder unshare pulsemaster_packages {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - SHARE_ADDED == '0'
     - XMPP_DOMAIN != 'pulse'

 - name: Re-share packages folder to local relay from main pulse
   shell: stman folder share pulsemaster_packages {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - SHARE_ADDED == '0'
     - XMPP_DOMAIN != 'pulse'

 - pause:
     seconds: 40

##### END DELEGATE TO

 - name: Stop syncthing@syncthing
   systemd:
     name: syncthing@syncthing
     state: stopped
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: Move packages folder from syncthing home
   command: mv /var/lib/syncthing/packages/.stfolder  /var/lib/pulse2/packages/
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: Delete packages folder from syncthing home
   file:
     path: /var/lib/syncthing/packages
     state: absent
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: Change path to packages folder in syncthing config file
   shell: xmlstarlet ed --inplace -u "configuration/folder[@id='pulsemaster_packages']/@path" -v "/var/lib/pulse2/packages" /var/lib/syncthing/.config/syncthing/config.xml
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: Restart syncthing@syncthing
   systemd:
     name: syncthing@syncthing
     state: restarted
   when:
     - XMPP_DOMAIN != 'pulse'

 - pause:
     seconds: 5
   when:
     - XMPP_DOMAIN != 'pulse'

#######################################################
 - debug:
     msg: "________________________________________"
 - debug:
     msg: "_CONFIG_SYNCTHING_SHARE_BASEREMOTEAGENT_"
 - debug:
     msg: "________________________________________"

 - name: Get hostname
   shell: hostname -s
   register: result

 - name: set xmppDomain to hostname
   set_fact:
     XMPP_DOMAIN: "{{ result.stdout }}"

 - name: get LOCAL_DEVICE_ID
   shell: syncthing -home=/var/lib/syncthing/.config/syncthing/ -device-id
   register: localdeviceid

 - name: set LOCAL_DEVICE_ID
   set_fact:
     LOCAL_DEVICE_ID: "{{ localdeviceid.stdout }}"

##########################################################
#                         Checks                         #
##########################################################

 - name: Check if share is already configured
   shell: xmlstarlet sel -t -c "configuration/folder[@id='pulsemaster_baseremoteagent']/device[@id='{{ LOCAL_DEVICE_ID }}']" /var/lib/syncthing/.config/syncthing/config.xml |wc -c
   register: xmlout
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: set SHARE_CONFIGURED
   set_fact:
     SHARE_CONFIGURED: "{{ xmlout.stdout }}"
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: Unshare baseremoteagent folder from main pulse
   shell: stman folder unshare pulsemaster_baseremoteagent {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - SHARE_CONFIGURED == '1'
     - XMPP_DOMAIN != 'pulse'

 - pause:
     seconds: 20
   when:
     - SHARE_CONFIGURED == '1'
     - XMPP_DOMAIN != 'pulse'

 - name: Remove /var/lib/pulse2/xmpp_baseremoteagent if present
   file:
     path: /var/lib/pulse2/xmpp_baseremoteagent
     state: absent
   when:
     - SHARE_CONFIGURED == '1'
     - XMPP_DOMAIN != 'pulse'

##########################################################

 - name: delete /var/lib/syncthing/baseremoteagent if present
   file:
     path: /var/lib/syncthing/baseremoteagent
     state: absent

 - name: create /var/lib/pulse2/xmpp_baseremoteagent
   file:
     path: /var/lib/pulse2/xmpp_baseremoteagent
     state: directory
     owner: syncthing
     group: syncthing

 - name: install acl
   apt:
     update_cache: yes
     state: latest
     pkg:
       - acl
   when:
     - ansible_distribution == "Debian" or ansible_distribution == "Mageia"

 - name: setfacl on xmpp_baseremoteagent (-Rdm g:syncthing:rwx /var/lib/pulse2/xmpp_baseremoteagent/)
   shell: setfacl -Rdm g:syncthing:rwx /var/lib/pulse2/xmpp_baseremoteagent/

 - name: setfacl on xmpp_baseremoteagent (-Rm g:syncthing:rwx /var/lib/pulse2/xmpp_baseremoteagent/)
   shell: setfacl -Rm g:syncthing:rwx /var/lib/pulse2/xmpp_baseremoteagent/

 - name: Create baseremoteagent syncthing share on main pulse
   shell: stman folder add --label baseremoteagent --foldertype readonly /var/lib/pulse2/xmpp_baseremoteagent/ pulsemaster_baseremoteagent
   when:
     - XMPP_DOMAIN == 'pulse'

#######DELEGATE TO

 - name: Share baseremoteagent folder to local relay from main pulse
   shell: stman folder share pulsemaster_baseremoteagent {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - SHARE_ADDED == '0'
     - XMPP_DOMAIN != 'pulse'

 - pause:
     seconds: 20

 - name: Check if share is added
   shell: xmlstarlet sel -t -c "configuration/folder[@id='pulsemaster_baseremoteagent']/device[@id='{{ LOCAL_DEVICE_ID }}']" /var/lib/syncthing/.config/syncthing/config.xml |wc -c
   register: xmlout
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: set SHARE_ADDED
   set_fact:
     SHARE_ADDED: "{{ xmlout.stdout }}"
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: If share is not added, unshare packages folder from main pulse
   shell: stman folder unshare pulsemaster_baseremoteagent {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - SHARE_ADDED == '0'
     - XMPP_DOMAIN != 'pulse'

 - name: Re-share packages folder to local relay from main pulse
   shell: stman folder share pulsemaster_baseremoteagent {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - SHARE_ADDED == '0'
     - XMPP_DOMAIN != 'pulse'

 - pause:
     seconds: 40

##### END DELEGATE TO

 - name: Stop syncthing@syncthing
   systemd:
     name: syncthing@syncthing
     state: stopped
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: Move baseremoteagent folder from syncthing home
   command: mv /var/lib/syncthing/baseremoteagent/.stfolder  /var/lib/pulse2/xmpp_baseremoteagent/
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: Delete baseremoteagent folder from syncthing home
   file:
     path: /var/lib/syncthing/baseremoteagent
     state: absent
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: Change path to baseremoteagent folder in syncthing config file
   shell: xmlstarlet ed --inplace -u "configuration/folder[@id='pulsemaster_baseremoteagent']/@path" -v "/var/lib/pulse2/xmpp_baseremoteagent" /var/lib/syncthing/.config/syncthing/config.xml
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: Restart syncthing@syncthing
   systemd:
     name: syncthing@syncthing
     state: restarted
   when:
     - XMPP_DOMAIN != 'pulse'

 - pause:
     seconds: 5
   when:
     - XMPP_DOMAIN != 'pulse'

#######################################################
 - debug:
     msg: "________________________________________"
 - debug:
     msg: "____CONFIG_SYNCTHING_SHARE_DOWNLOADS____"
 - debug:
     msg: "________________________________________"

 - name: Get hostname
   shell: hostname -s
   register: result

 - name: set xmppDomain to hostname
   set_fact:
     XMPP_DOMAIN: "{{ result.stdout }}"

 - name: get LOCAL_DEVICE_ID
   shell: syncthing -home=/var/lib/syncthing/.config/syncthing/ -device-id
   register: localdeviceid

 - name: set LOCAL_DEVICE_ID
   set_fact:
     LOCAL_DEVICE_ID: "{{ localdeviceid.stdout }}"

##########################################################
#                         Checks                         #
##########################################################

 - name: Check if share is already configured
   shell: xmlstarlet sel -t -c "configuration/folder[@id='pulsemaster_downloads']/device[@id='{{ LOCAL_DEVICE_ID }}']" /var/lib/syncthing/.config/syncthing/config.xml |wc -c
   register: xmlout
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: set SHARE_CONFIGURED
   set_fact:
     SHARE_CONFIGURED: "{{ xmlout.stdout }}"
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: Unshare downloads folder from main pulse
   shell: stman folder unshare pulsemaster_downloads {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - SHARE_CONFIGURED == '1'
     - XMPP_DOMAIN != 'pulse'

 - pause:
     seconds: 20
   when:
     - SHARE_CONFIGURED == '1'
     - XMPP_DOMAIN != 'pulse'

 - name: Remove /var/lib/pulse2/clients if present
   file:
     path: /var/lib/pulse2/clients
     state: absent
   when:
     - SHARE_CONFIGURED == '1'
     - XMPP_DOMAIN != 'pulse'

##########################################################

 - name: delete /var/lib/syncthing/downloads if present
   file:
     path: /var/lib/syncthing/downloads
     state: absent

 - name: create /var/lib/pulse2/clients
   file:
     path: /var/lib/pulse2/clients
     state: directory
     owner: syncthing
     group: syncthing

 - name: create file /var/lib/pulse2/clients/.stfolder if not present
   file:
     path: /var/lib/pulse2/clients/.stfolder
     state: directory
     mode: '0755'
     owner: syncthing
     group: syncthing

 - name: write in /var/lib/pulse2/clients/.stignore
   copy:
     content: "config\ngenerate-*\nreversessh\n.generation_options"
     dest: /var/lib/pulse2/clients/.stignore
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: write in /var/lib/pulse2/clients/.stignore
   copy:
     content: "reversessh"
     dest: /var/lib/pulse2/clients/.stignore
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: chown syncthing /var/lib/pulse2/clients/.stignore
   shell: 'chown syncthing: /var/lib/pulse2/clients/.stignore'

 - name: install acl
   apt:
     update_cache: yes
     state: latest
     pkg:
       - acl
   when:
     - ansible_distribution == "Debian" or ansible_distribution == "Mageia"

 - name: setfacl on clients (-Rdm g:syncthing:rwx /var/lib/pulse2/clients/.stignore)
   shell: setfacl -Rdm g:syncthing:rwx /var/lib/pulse2/clients/.stignore

 - name: setfacl on clients (-Rm g:syncthing:rwx /var/lib/pulse2/clients/.stignore)
   shell: setfacl -Rm g:syncthing:rwx /var/lib/pulse2/clients/.stignore

 - name: Create baseremoteagent syncthing share on main pulse
   shell: stman folder add --label downloads --foldertype readonly /var/lib/pulse2/clients/ pulsemaster_downloads
   when:
     - XMPP_DOMAIN == 'pulse'

#######DELEGATE TO

 - name: Share downloads folder to local relay from main pulse
   shell: stman folder share pulsemaster_downloads {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - SHARE_ADDED == '0'
     - XMPP_DOMAIN != 'pulse'

 - pause:
     seconds: 20

 - name: Check if share is added
   shell: xmlstarlet sel -t -c "configuration/folder[@id='pulsemaster_downloads']/device[@id='{{ LOCAL_DEVICE_ID }}']" /var/lib/syncthing/.config/syncthing/config.xml |wc -c
   register: xmlout
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: set SHARE_ADDED
   set_fact:
     SHARE_ADDED: "{{ xmlout.stdout }}"
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: If share is not added, unshare downloads folder from main pulse
   shell: stman folder unshare pulsemaster_downloads {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - SHARE_ADDED == '0'
     - XMPP_DOMAIN != 'pulse'

 - name: Re-share downloads folder to local relay from main pulse
   shell: stman folder share pulsemaster_downloads {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - SHARE_ADDED == '0'
     - XMPP_DOMAIN != 'pulse'

 - pause:
     seconds: 40

##### END DELEGATE TO

 - name: Stop syncthing@syncthing
   systemd:
     name: syncthing@syncthing
     state: stopped
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: Move downloads folder from syncthing home
   command: mv /var/lib/syncthing/downloads/.stfolder  /var/lib/pulse2/clients/
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: Delete downloads folder from syncthing home
   file:
     path: /var/lib/syncthing/downloads
     state: absent
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: Change path to downloads folder in syncthing config file
   shell: xmlstarlet ed --inplace -u "configuration/folder[@id='pulsemaster_downloads']/@path" -v "/var/lib/pulse2/clients" /var/lib/syncthing/.config/syncthing/config.xml
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: Restart syncthing@syncthing
   systemd:
     name: syncthing@syncthing
     state: restarted
   when:
     - XMPP_DOMAIN != 'pulse'

 - pause:
     seconds: 5
   when:
     - XMPP_DOMAIN != 'pulse'

#######################################################
 - debug:
     msg: "_____________________________"
 - debug:
     msg: "____CONFIG_SYNCTHING_DEPL____"
 - debug:
     msg: "_____________________________"


 - name: Get hostname
   shell: hostname -s
   register: result

 - name: set xmppDomain to hostname
   set_fact:
     XMPP_DOMAIN: "{{ result.stdout }}"

 - name: get LOCAL_DEVICE_ID
   set_fact:
     LOCAL_DEVICE_ID: syncthing -home=/var/lib/syncthing-depl/.config/syncthing/ -device-id

 - name: execute LOCAL_DEVICE_ID
   shell: '{{ LOCAL_DEVICE_ID }}'
   register: deviceid

 - name: set LOCAL_DEVICE_ID
   set_fact:
     LOCAL_DEVICE_ID: "{{ deviceid.stdout }}"

 - name: set SYNCTHING_APACHE_PATH
   set_fact:
     SYNCTHING_APACHE_PATH: '/etc/httpd/conf.d/syncthing.conf'
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"

    # Configure Apache for syncthing-depl

 - name: write <Location /syncthing-depl/> in file set LOCAL_DEVICE_ID
   lineinfile:
     dest: '{{ SYNCTHING_APACHE_PATH }}'
     line: '{{ item }}'
   with_items:
     - "ProxyPass /syncthing-depl/ http://localhost:8385/"
     - "<Location /syncthing-depl/>"
     - "    ProxyPassReverse http://localhost:8385/"
     - "    Require all granted"
     - "</Location>\n"

 - name: reload apache2
   systemd:
     name: httpd
     state: reloaded
   when:
     - ansible_distribution != "Debian"

#######START DELEGATE TO

 - name: set SYNCTHING_APACHE_PATH
   set_fact:
     SYNCTHING_APACHE_PATH: '/etc/httpd/conf.d/syncthing.conf'
   when:
     - ansible_distribution != "Debian"

 - name: check if /etc/httpd/conf.d exist
   stat:
     path: /etc/httpd/conf.d
   register: file_details
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - ansible_distribution == "CentOS"

 - name: write <Location /syncthing-depl-{{ XMPP_DOMAIN }}/> in file {{ SYNCTHING_APACHE_PATH }}
   lineinfile:
     dest: '{{ SYNCTHING_APACHE_PATH }}'
     line: '{{ item }}'
   with_items:
     - "ProxyPass /syncthing-depl-{{ XMPP_DOMAIN }}/ http://{{ XMPP_DOMAIN }}/syncthing-depl/"
     - "<Location /syncthing-depl-{{ XMPP_DOMAIN }}/>"
     - "    ProxyPassReverse http://{{ XMPP_DOMAIN }}/syncthing-depl/"
     - "    Require all granted"
     - "</Location>\n"
   delegate_to: '{{ PULSEMAIN_IP }}'
   ignore_errors: yes
   when:
     - file_details.stat.exists
     - XMPP_DOMAIN != 'pulse'
     - ansible_distribution == "CentOS"

 - name: Check if Service apache2 Exists
   stat:
     path: /etc/init.d/apache2
   register: service_status
   delegate_to: '{{ PULSEMAIN_IP }}'

 - name: Check if Service httpd Exists
   stat: path=/etc/init.d/httpd
   register: service_status
   delegate_to: '{{ PULSEMAIN_IP }}'

 - name: reload httpd
   systemd:
     name: httpd
     state: reloaded
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == 'Rhel'
     - XMPP_DOMAIN != 'pulse'
     - service_status.stat.exists

#######END DELEGATE TO

# Stop syncthing service

 - name: stop service syncthing@syncthing-depl
   systemd:
     name: syncthing@syncthing-depl
     state: stopped

# Use the local discovery server

 - name: get PULSEMAIN_DEVICE_ID
   set_fact:
     PULSEMAIN_DEVICE_ID: 'syncthing -home=/var/lib/syncthing/.config/syncthing/ -device-id'
   when:
     - XMPP_DOMAIN == "pulse"

 - name: execute PULSEMAIN_DEVICE_ID
   shell: '{{ PULSEMAIN_DEVICE_ID }}'
   register: deviceid
   when:
     - XMPP_DOMAIN == "pulse"

 - name: set PULSEMAIN_DEVICE_ID
   set_fact:
     PULSEMAIN_DEVICE_ID: '{{ deviceid.stdout }}'
   when:
     - XMPP_DOMAIN == "pulse"

 - name: xmlstarlet config global announce server syncthing
   shell: 'xmlstarlet ed --inplace -u "configuration/options/globalAnnounceServer" -v "https://localhost:8443/?id={{ PULSEMAIN_DEVICE_ID }}" /var/lib/syncthing-depl/.config/syncthing/config.xml'
   when:
     - XMPP_DOMAIN == "pulse"

# else
 - name: get PULSEMAIN_DEVICE_ID
   shell: syncthing -home=/var/lib/syncthing/.config/syncthing/ -device-id
   delegate_to: '{{ PULSEMAIN_IP }}'
   register: device
   when:
     - XMPP_DOMAIN != "pulse"

 - name: set PULSEMAIN_DEVICE_ID
   set_fact:
     PULSEMAIN_DEVICE_ID: '{{ device.stdout }}'
   when:
     - XMPP_DOMAIN != "pulse"

 - name: xmlstarlet configuration globalAnnounceServer syncthing-depl
   shell: 'xmlstarlet ed --inplace -u "configuration/options/globalAnnounceServer" -v "https://{{ PULSEMAIN_FQDN }}:8443/?id={{ PULSEMAIN_DEVICE_ID }}" /var/lib/syncthing-depl/.config/syncthing/config.xml'
   when:
     - XMPP_DOMAIN != "pulse"

# Disable use of syncthing relays and local announce

 - name: xmlstarlet disable relays
   shell: 'xmlstarlet ed --inplace -u "configuration/options/relaysEnabled" -v "false" /var/lib/syncthing-depl/.config/syncthing/config.xml'

 - name: xmlstarlet disable local announce
   shell: 'xmlstarlet ed --inplace -u "configuration/options/localAnnounceEnabled" -v "false" /var/lib/syncthing-depl/.config/syncthing/config.xml'

# Setup a username and password for accessing syncthing

 - name: xmlstarlet add root user
   shell: 'xmlstarlet ed --inplace -s "configuration/gui" -t elem -n user -v root /var/lib/syncthing-depl/.config/syncthing/config.xml'

 - name: set ENCRYPTED_PASS
   set_fact:
     ENCRYPTED_PASS: $(htpasswd -bnBC 10 "" {{ ROOT_PASSWORD }} | tr -d ':\n' | sed 's/$2y/$2a/')

 - name: xmlstarlet set root password
   shell: 'xmlstarlet ed --inplace -s "configuration/gui" -t elem -n password -v {{ ENCRYPTED_PASS }} /var/lib/syncthing-depl/.config/syncthing/config.xml'

# Reconfigure listen ports for syncthing-depl

 - name: xmlstarlet define listen port to 23000
   shell: 'xmlstarlet ed --inplace -u "configuration/options/listenAddress" -v "tcp://0.0.0.0:23000" /var/lib/syncthing-depl/.config/syncthing/config.xml'

 - name: xmlstarlet define gui listen port to 8385
   shell: 'xmlstarlet ed --inplace -u "configuration/gui/address" -v "127.0.0.1:8385" /var/lib/syncthing-depl/.config/syncthing/config.xml'

# Restart syncthing service

 - name: restart service syncthing@syncthing-depl
   systemd:
     name: syncthing@syncthing-depl
     state: restarted

 - pause:
     seconds: 10

# Configure syncthingmanager

 - name: get apikey
   set_fact:
     API_KEY: $(xmlstarlet sel -t -v "configuration/gui/apikey" /var/lib/syncthing-depl/.config/syncthing/config.xml)

 - name: stman configure apikey
   shell: "stman configure -k {{ API_KEY }} -p 8385 -n depl"

# Change the name to use the same as the XMPP domain

 - name: stman device edit
   shell: "stman -d depl device edit -n {{ XMPP_DOMAIN }} {{ LOCAL_DEVICE_ID }}"

# Add device to pool if relay server
# Add device to pool on pulsemain

 - name: stman device add
   shell: 'stman -d depl device add --name {{ XMPP_DOMAIN }} --address tcp://{{ IP_ADDRESS }}:23000 {{ LOCAL_DEVICE_ID }} --introducer'
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != "pulse"

# Find pulsemain device id

 - name: get pulsemain device id
   shell: 'syncthing -home=/var/lib/syncthing-depl/.config/syncthing/ -device-id'
   delegate_to: '{{ PULSEMAIN_IP }}'
   register: deviceout
   when:
     - XMPP_DOMAIN != "pulse"

 - name: set PULSEMAIN_DEVICE_ID
   set_fact:
     PULSEMAIN_DEVICE_ID: '{{ deviceout.stdout}}'
   when:
     - XMPP_DOMAIN != "pulse"

# Add pulsemain to local pool

 - name: stman device add --name --address --introducer
   shell: 'stman -d depl device add --name pulse --address tcp://{{ PULSEMAIN_IP }}:23000 --introducer {{ PULSEMAIN_DEVICE_ID }}'
   when:
     - XMPP_DOMAIN != "pulse"

# Auto-accept shares coming from pulsemain

 - name: xmlstarlet auto-accept shares coming from pulsemain
   shell: xmlstarlet ed --inplace -u "configuration/device[@id='{{ PULSEMAIN_DEVICE_ID }}']/autoAcceptFolders" -v true /var/lib/syncthing-depl/.config/syncthing/config.xml
   when:
     - XMPP_DOMAIN != "pulse"

 - name: service restart syncthing@syncthing-depl
   systemd:
     name: syncthing@syncthing-depl
     state: restarted
   when:
     - XMPP_DOMAIN != "pulse"

 - pause:
     seconds: 2
   when:
     - XMPP_DOMAIN != "pulse"

# Delete the default share

 - name: stman folder remove "Default Folder"
   shell: 'stman -d depl folder remove "Default Folder"'

# Update relay config

 - name: set RELAY_CONFIG_FILE
   set_fact:
     RELAY_CONFIG_FILE: '/etc/pulse-xmpp-agent/relayconf.ini.local'

 - name: shell crudini --set {{ RELAY_CONFIG_FILE }} syncthing-deploy syncthing_gui_apikey
   shell: 'crudini --set {{ RELAY_CONFIG_FILE }} syncthing-deploy syncthing_gui_apikey "{{ API_KEY }}"'

 - name: shell crudini --set {{ RELAY_CONFIG_FILE }} syncthing-deploy syncthing_gui_apikey
   shell: 'crudini --set {{ RELAY_CONFIG_FILE }} syncthing-deploy syncthing_device_id "{{ LOCAL_DEVICE_ID }}"'

 - name: system restart pulse-xmpp-agent-relay service
   systemd:
     name: pulse-xmpp-agent-relay
     state: restarted

#######################################################
 - debug:
     msg: "_____________________________"
 - debug:
     msg: "______CONFIG_SSH_SERVER______"
 - debug:
     msg: "_____________________________"

 - name: Setup port 22 if reversessh port is defined
   lineinfile:
     dest: "/etc/ssh/sshd_config"
     line: "Port 22"
   when:
     - REVERSE_SSH_PORT != ''

 - name: Setup alternate SSH port if defined
   lineinfile:
     dest: "/etc/ssh/sshd_config"
     line: "Port {{ REVERSE_SSH_PORT }}"
   when:
     - REVERSE_SSH_PORT != ''

 - name: restart ssh
   service:
     name: sshd
     state: restarted
   when: ansible_distribution != "Debian" or ansible_distribution != "Mageia"

#FILEBROWSER

# Enable GatewayPorts for reversessh from clients to access filebrowser

 - name: grep for gatewayports
   shell: 'grep "^GatewayPorts .*$" /etc/ssh/sshd_config'
   ignore_errors: yes
   register:
     state_result_gatewayports

 - name: set GATEWAYPORTS_RES
   set_fact:
     GATEWAYPORTS_RES: state_result_gatewayports.results

 - name: config gatewayports
   shell: sed -i 's/^#[[:space:]]*GatewayPorts .*$/GatewayPorts yes/' /etc/ssh/sshd_config
   when:
     - GATEWAYPORTS_RES == '' or GATEWAYPORTS_RES == '0'

 - name: config gatewayports
   shell: sed -i 's/GatewayPorts .*$/GatewayPorts yes/' /etc/ssh/sshd_config
   when:
     - GATEWAYPORTS_RES != '' or GATEWAYPORTS_RES != '0'


 - name: restart ssh
   service:
     name: sshd
     state: restarted
   when: ansible_distribution != "Debian" or ansible_distribution != "Mageia"

#######################################################
 - debug:
     msg: "_____________________________"
 - debug:
     msg: "_____CONFIG_RELAY_SERVER_____"
 - debug:
     msg: "_____________________________"


 - name: Get hostname
   shell: hostname -s
   register: result

 - name: set xmppDomain to hostname
   set_fact:
     XMPP_DOMAIN: "{{ result.stdout }}"

#get ip

 - name: Get hostname complete
   shell: ip addr show {{ INTERFACE }} | grep -w inet | awk '{print $2}' | cut -d "/" -f 1
   register: resultip

 - name: set IP_ADDRESS
   set_fact:
     IP_ADDRESS: "{{ resultip.stdout }}"

#get ip

 - name: shell grep ip
   shell: ip addr show {{ INTERFACE_TO_PULSE }} | grep -w inet | awk '{print $2}' | cut -d "/" -f 1
   register: ipadressout

 - name: set IP_REMOTE_SERVER
   set_fact:
     IP_REMOTE_SERVER: '{{ ipadressout.stdout }}'

#

 - name: set RELAY_CONFIG_FILE
   set_fact:
     RELAY_CONFIG_FILE: '/etc/pulse-xmpp-agent/relayconf.ini.local'

 - name: set PLUGINLIST
   set_fact:
     PLUGINLIST: 'crudini --get /etc/pulse-xmpp-agent/relayconf.ini plugin pluginlist'

 - name: echo crudini --set
   shell: 'crudini --set {{ RELAY_CONFIG_FILE }} plugin pluginlist "{{ PLUGINLIST }}"'

# IF XMPP_DOMAIN != pulse
# Obtain MASTER_PASSWORD from Pulse main server

 - name: crudini get connection password
   shell: 'crudini --get /etc/pulse-xmpp-agent/relayconf.ini.local connection password'
   delegate_to: '{{ PULSEMAIN_IP }}'
   register: crudiniout
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: set master password
   set_fact:
     MASTER_PASSWORD: '{{ crudiniout.stdout }}'
   when:
     - XMPP_DOMAIN != 'pulse'

# Register master
 - name: ejabctl register master
   shell: "ejabberdctl register master {{ XMPP_DOMAIN }} {{ MASTER_PASSWORD }}"
   when:
     - XMPP_DOMAIN != 'pulse'

 - debug:
     msg: '{{ MASTER_PASSWORD }}'

 - name: set GUACAMOLE_BASEURL
   set_fact:
     GUACAMOLE_BASEURL: 'http://{{ PULSEMAIN_FQDN }}/guacamole-{{ XMPP_DOMAIN }}/#/client/@@CUX_ID@@?username=root&password={{ GUACAMOLE_ROOT_PASSWORD }}'
   when:
     - XMPP_DOMAIN != 'pulse'

# Copy manage_scheduler_relay from main pulse

# Register master
 - name: fetch manage_scheduler_relay.ini from pulsemain
   fetch:
     src: "/etc/pulse-xmpp-agent/manage_scheduler_relay.ini"
     dest: "/tmp/{{ansible_hostname}}-manage_scheduler_relay.ini"
     flat: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: copy manage_scheduler_relay.ini
   copy:
     src: "/tmp/{{ansible_hostname}}-manage_scheduler_relay.ini"
     dest: "/etc/pulse-xmpp-agent/manage_scheduler_relay.ini"
   when:
     - XMPP_DOMAIN != 'pulse'

# Enable and start the package watching service
 - name: enabled pulse-package-watching
   systemd:
     name: pulse-package-watching
     enabled: yes
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: start pulse-package-watching service
   service:
     name: pulse-package-watching
     state: started
   when:
     - XMPP_DOMAIN != 'pulse'

# Configuration of relayserver

 - name: relayserver crudini connection server
   shell: crudini --set {{ RELAY_CONFIG_FILE }} connection server {{ IP_ADDRESS }}

 - name: relayserver crudini connection password
   shell: crudini --set {{ RELAY_CONFIG_FILE }} connection password {{ MASTER_PASSWORD }}

 - name: relayserver crudini type guacamole_baseurl
   shell: crudini --set {{ RELAY_CONFIG_FILE }} type guacamole_baseurl "{{ GUACAMOLE_BASEURL }}"

 - name: relayserver crudini chat domain
   shell: crudini --set {{ RELAY_CONFIG_FILE }} chat domain {{ XMPP_DOMAIN }}

 - name: relayserver crudini jid_01 jidname RS
   shell: crudini --set {{ RELAY_CONFIG_FILE }} jid_01 jidname RS{{ XMPP_DOMAIN }}@{{ XMPP_DOMAIN }}/pulse01a

 - name: relayserver if public_ip != ''
   shell: |
     "crudini --set {{ RELAY_CONFIG_FILE }} type request_type public"
     "crudini --set {{ RELAY_CONFIG_FILE }} type public_ip {{ PUBLIC_IP }}"
   when:
     - PUBLIC_IP != ''

 - name: relayserver crudini --set --list plugin pluginlist guacamoleconf
   shell: "crudini --set --list {{ RELAY_CONFIG_FILE }} plugin pluginlist guacamoleconf"

 - name: set RELAY_CONFIG_FILE
   set_fact:
     GUAC_CONFIG_FILE: '/etc/pulse-xmpp-agent/guacamoleconf.ini.local'

 - name: relayserver crudini --set  parameters guacamole_dbpasswd
   shell: "crudini --set {{ GUAC_CONFIG_FILE }} parameters guacamole_dbpasswd {{ ROOT_PASSWORD }}"

# Update hosts file

# Update local hosts file with pulse
 - name: grep {{ IP_ADDRESS }} pulse /etc/hosts
   shell: grep -cx "{{ IP_ADDRESS }} pulse" /etc/hosts
   ignore_errors: yes
   register: grepresult
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: set RES_GREP
   set_fact:
     RES_GREP: '{{ grepresult.stdout }}'
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: update local file /etc/hosts
   lineinfile:
     line: "{{ IP_ADDRESS }} pulse\n"
     dest: "/etc/hosts"
   when:
     - XMPP_DOMAIN == 'pulse'
     - RES_GREP == "0" or RES_GREP == ''

# Update local hosts file to find pulse xmpp domain
 - name: grep {{ PULSEMAIN_IP }} pulse /etc/hosts
   shell: grep -cx "{{ PULSEMAIN_IP }} pulse" /etc/hosts
   ignore_errors: yes
   register: grepresult
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: set RES_GREP
   set_fact:
     RES_GREP: '{{ grepresult.stdout }}'
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: update local file /etc/hosts
   lineinfile:
     line: "{{ PULSEMAIN_IP }} pulse\n"
     dest: "/etc/hosts"
   when:
     - XMPP_DOMAIN != 'pulse'
     - RES_GREP == "0" or RES_GREP == ''

# Update local hosts file to find local xmpp domain
 - name: grep {{ IP_ADDRESS }} {{ XMPP_DOMAIN }} /etc/hosts
   shell: grep -cx "{{ IP_ADDRESS }} {{ XMPP_DOMAIN }}" /etc/hosts
   ignore_errors: yes
   register: grepresult
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: set RES_GREP
   set_fact:
     RES_GREP: '{{ grepresult.stdout }}'
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: update local file /etc/hosts
   lineinfile:
     line: "{{ IP_ADDRESS }} {{ XMPP_DOMAIN }}\n"
     dest: "/etc/hosts"
   when:
     - XMPP_DOMAIN != 'pulse'
     - RES_GREP == "0" or RES_GREP == ''

################DELEGATE TO

 - name: grep {{ IP_REMOTE_SERVER }} {{ XMPP_DOMAIN }} /etc/hosts
   shell: grep -cx "{{ IP_REMOTE_SERVER }} {{ XMPP_DOMAIN }}" /etc/hosts
   ignore_errors: yes
   register: grepresult
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: set RES_GREP
   set_fact:
     RES_GREP: '{{ grepresult.stdout }}'
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: write {{ IP_REMOTE_SERVER }} {{ XMPP_DOMAIN }} in /etc/hosts if not in
   lineinfile:
     line: '{{ IP_REMOTE_SERVER }} {{ XMPP_DOMAIN }}'
     dest: /etc/hosts
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - RES_GREP == "0" or RES_GREP == ''
     - XMPP_DOMAIN != 'pulse'

 #2

 - name: grep {{ IP_REMOTE_SERVER }} {{ XMPP_DOMAIN }} /etc/hosts
   shell: grep -cx "{{ IP_REMOTE_SERVER }} {{ XMPP_DOMAIN }}" /etc/hosts
   ignore_errors: yes
   register: grepresult
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: set RES_GREP
   set_fact:
     RES_GREP: '{{ grepresult.stdout }}'
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: write {{ IP_REMOTE_SERVER }} {{ XMPP_DOMAIN }} in /etc/hosts if not in
   lineinfile:
     line: '{{ IP_REMOTE_SERVER }} {{ XMPP_DOMAIN }}'
     dest: /etc/hosts
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - RES_GREP == "0" or RES_GREP == ''
     - XMPP_DOMAIN != 'pulse'

# Update ssh port to be used on clients if defined
#applicationdeploymentjson
 - name: set PLUGIN_CONFIG_FILE
   set_fact:
     PLUGIN_CONFIG_FILE: '/etc/pulse-xmpp-agent/applicationdeploymentjson.ini.local'
   when:
     - XMPP_DOMAIN == 'pulse'
     - CLIENTS_SSH_PORT != ''

 - name: crudini parameters clients_ssh_port
   shell: 'crudini --set {{ PLUGIN_CONFIG_FILE }} parameters clients_ssh_port {{ CLIENTS_SSH_PORT }}'
   when:
     - XMPP_DOMAIN == 'pulse'
     - CLIENTS_SSH_PORT != ''

 - name: crudini plugin pluginlist applicationdeploymentjson
   shell: 'crudini --set --list {{ RELAY_CONFIG_FILE }} plugin pluginlist applicationdeploymentjson'
   when:
     - XMPP_DOMAIN == 'pulse'
     - CLIENTS_SSH_PORT != ''

#else xxmp_domain != pulse

 - name: set PLUGIN_CONFIG_FILE
   set_fact:
     PLUGIN_CONFIG_FILE: '/etc/pulse-xmpp-agent/applicationdeploymentjson.ini.local'
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: fetch {{ PLUGIN_CONFIG_FILE }} from pulsemain
   fetch:
     src: "{{ PLUGIN_CONFIG_FILE }}"
     dest: "/tmp/{{ansible_hostname}}-temp.ini"
     flat: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: copy in {{ PLUGIN_CONFIG_FILE }}
   copy:
     src: "/tmp/{{ansible_hostname}}-temp.ini"
     dest: "{{ PLUGIN_CONFIG_FILE }}"
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: crudini plugin pluginlist applicationdeploymentjson
   shell: 'crudini --set --list {{ RELAY_CONFIG_FILE }} plugin pluginlist applicationdeploymentjson'
   when:
     - XMPP_DOMAIN != 'pulse'

#downloadfileexpert

 - name: set PLUGIN_CONFIG_FILE
   set_fact:
     PLUGIN_CONFIG_FILE: '/etc/pulse-xmpp-agent/downloadfileexpert.ini.local'
   when:
     - XMPP_DOMAIN == 'pulse'
     - CLIENTS_SSH_PORT != ''

 - name: crudini parameters clients_ssh_port
   shell: 'crudini --set {{ PLUGIN_CONFIG_FILE }} parameters clients_ssh_port {{ CLIENTS_SSH_PORT }}'
   when:
     - XMPP_DOMAIN == 'pulse'
     - CLIENTS_SSH_PORT != ''

 - name: crudini plugin pluginlist downloadfileexpert
   shell: 'crudini --set --list {{ RELAY_CONFIG_FILE }} plugin pluginlist downloadfileexpert'
   when:
     - XMPP_DOMAIN == 'pulse'
     - CLIENTS_SSH_PORT != ''

#else xxmp_domain != pulse

 - name: set PLUGIN_CONFIG_FILE
   set_fact:
     PLUGIN_CONFIG_FILE: '/etc/pulse-xmpp-agent/downloadfileexpert.ini.local'
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: fetch {{ PLUGIN_CONFIG_FILE }} from pulsemain
   fetch:
     src: "{{ PLUGIN_CONFIG_FILE }}"
     dest: "/tmp/{{ansible_hostname}}-temp.ini"
     flat: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: copy in {{ PLUGIN_CONFIG_FILE }}
   copy:
     src: "/tmp/{{ansible_hostname}}-temp.ini"
     dest: "{{ PLUGIN_CONFIG_FILE }}"
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: crudini plugin pluginlist downloadfileexpert
   shell: 'crudini --set --list {{ RELAY_CONFIG_FILE }} plugin pluginlist downloadfileexpert'
   when:
     - XMPP_DOMAIN != 'pulse'

#downloadfile

 - name: set PLUGIN_CONFIG_FILE
   set_fact:
     PLUGIN_CONFIG_FILE: '/etc/pulse-xmpp-agent/downloadfile.ini.local'
   when:
     - XMPP_DOMAIN == 'pulse'
     - CLIENTS_SSH_PORT != ''

 - name: crudini parameters clients_ssh_port
   shell: 'crudini --set {{ PLUGIN_CONFIG_FILE }} parameters clients_ssh_port {{ CLIENTS_SSH_PORT }}'
   when:
     - XMPP_DOMAIN == 'pulse'
     - CLIENTS_SSH_PORT != ''

 - name: crudini plugin pluginlist downloadfile
   shell: 'crudini --set --list {{ RELAY_CONFIG_FILE }} plugin pluginlist downloadfile'
   when:
     - XMPP_DOMAIN == 'pulse'
     - CLIENTS_SSH_PORT != ''

#else xxmp_domain != pulse

 - name: set PLUGIN_CONFIG_FILE
   set_fact:
     PLUGIN_CONFIG_FILE: '/etc/pulse-xmpp-agent/downloadfile.ini.local'
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: fetch {{ PLUGIN_CONFIG_FILE }} from pulsemain
   fetch:
     src: "{{ PLUGIN_CONFIG_FILE }}"
     dest: "/tmp/{{ansible_hostname}}-temp.ini"
     flat: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: copy in {{ PLUGIN_CONFIG_FILE }}
   copy:
     src: "/tmp/{{ansible_hostname}}-temp.ini"
     dest: "{{ PLUGIN_CONFIG_FILE }}"
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: crudini plugin pluginlist downloadfile
   shell: 'crudini --set --list {{ RELAY_CONFIG_FILE }} plugin pluginlist downloadfile'
   when:
     - XMPP_DOMAIN != 'pulse'

#guacamole

 - name: set PLUGIN_CONFIG_FILE
   set_fact:
     PLUGIN_CONFIG_FILE: '/etc/pulse-xmpp-agent/guacamole.ini.local'
   when:
     - XMPP_DOMAIN == 'pulse'
     - CLIENTS_SSH_PORT != ''

 - name: crudini parameters clients_ssh_port
   shell: 'crudini --set {{ PLUGIN_CONFIG_FILE }} parameters clients_ssh_port {{ CLIENTS_SSH_PORT }}'
   when:
     - XMPP_DOMAIN == 'pulse'
     - CLIENTS_SSH_PORT != ''

 - name: crudini plugin pluginlist guacamole
   shell: 'crudini --set --list {{ RELAY_CONFIG_FILE }} plugin pluginlist guacamole'
   when:
     - XMPP_DOMAIN == 'pulse'
     - CLIENTS_SSH_PORT != ''

#else xxmp_domain != pulse

 - name: set PLUGIN_CONFIG_FILE
   set_fact:
     PLUGIN_CONFIG_FILE: '/etc/pulse-xmpp-agent/guacamole.ini.local'
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: fetch {{ PLUGIN_CONFIG_FILE }} from pulsemain
   fetch:
     src: "{{ PLUGIN_CONFIG_FILE }}"
     dest: "/tmp/{{ansible_hostname}}-temp.ini"
     flat: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: copy in {{ PLUGIN_CONFIG_FILE }}
   copy:
     src: "/tmp/{{ansible_hostname}}-temp.ini"
     dest: "{{ PLUGIN_CONFIG_FILE }}"
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: crudini plugin pluginlist guacamole
   shell: 'crudini --set --list {{ RELAY_CONFIG_FILE }} plugin pluginlist guacamole'
   when:
     - XMPP_DOMAIN != 'pulse'

# Update vnc port to be used on clients if defined
 - name: set PLUGIN_CONFIG_FILE
   set_fact:
     PLUGIN_CONFIG_FILE: '/etc/pulse-xmpp-agent/guacamole.ini.local'

 - name: crudini plugin pluginlist guacamole
   shell: 'crudini --set --list {{ RELAY_CONFIG_FILE }} plugin pluginlist guacamole'
   when:
     - XMPP_DOMAIN == 'pulse'
     - CLIENTS_VNC_PORT != ''

 - name: crudini parameters clients_vnc_port
   shell: 'crudini --set {{ PLUGIN_CONFIG_FILE }} parameters clients_vnc_port {{ CLIENTS_VNC_PORT }}'
   when:
     - XMPP_DOMAIN == 'pulse'
     - CLIENTS_VNC_PORT != ''

 - name: fetch {{ PLUGIN_CONFIG_FILE }} from pulsemain
   fetch:
     src: "{{ PLUGIN_CONFIG_FILE }}"
     dest: "/tmp/{{ansible_hostname}}-temp.ini"
     flat: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: copy in {{ PLUGIN_CONFIG_FILE }}
   copy:
     src: "/tmp/{{ansible_hostname}}-temp.ini"
     dest: "{{ PLUGIN_CONFIG_FILE }}"
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: crudini plugin pluginlist reverse_ssh_on
   shell: 'crudini --set --list {{ RELAY_CONFIG_FILE }} plugin pluginlist reverse_ssh_on'
   when:
     - XMPP_DOMAIN != 'pulse'

# Update ssh port of reverse ssh server
 - name: set PLUGIN_CONFIG_FILE
   set_fact:
     PLUGIN_CONFIG_FILE: '/etc/pulse-xmpp-agent/reverse_ssh_on.ini.local'

 - name: crudini plugin pluginlist reverse_ssh_on
   shell: 'crudini --set --list {{ RELAY_CONFIG_FILE }} plugin pluginlist reverse_ssh_on'
   when:
     - XMPP_DOMAIN == 'pulse'
     - REVERSE_SSH_PORT != ''

 - name: crudini parameters reverseserver_ssh_port
   shell: 'crudini --set {{ PLUGIN_CONFIG_FILE }} parameters reverseserver_ssh_port {{ REVERSE_SSH_PORT }}'
   when:
     - XMPP_DOMAIN == 'pulse'
     - REVERSE_SSH_PORT != ''

 - name: fetch {{ PLUGIN_CONFIG_FILE }} from pulsemain
   fetch:
     src: "{{ PLUGIN_CONFIG_FILE }}"
     dest: "/tmp/{{ansible_hostname}}-temp.ini"
     flat: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: copy in {{ PLUGIN_CONFIG_FILE }}
   copy:
     src: "/tmp/{{ansible_hostname}}-temp.ini"
     dest: "{{ PLUGIN_CONFIG_FILE }}"
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: crudini plugin pluginlist reverse_ssh_on
   shell: 'crudini --set --list {{ RELAY_CONFIG_FILE }} plugin pluginlist reverse_ssh_on'
   when:
     - XMPP_DOMAIN != 'pulse'

# Allow orders coming from registration substitute (used to configure guacamole)
 - name: crudini global allow_order master_reg
   shell: 'crudini --set --list {{ RELAY_CONFIG_FILE }} global allow_order master_reg'

# Update default RS if on main pulse and public IP is defined

 - name: crudini defaultconnection serverip
   shell: 'crudini --set /etc/mmc/plugins/xmppmaster.ini.local defaultconnection serverip {{ PUBLIC_IP }}'
   when:
     - XMPP_DOMAIN == 'pulse'
     - PUBLIC_IP != ''

 - name: crudini parameters serverip
   shell: 'crudini --set /etc/mmc/plugins/assessor_agent.ini.local parameters serverip {{ PUBLIC_IP }}'
   when:
     - XMPP_DOMAIN == 'pulse'
     - PUBLIC_IP != ''

 - name: crudini parameters serverip
   shell: 'crudini --set /etc/pulse-xmpp-agent-substitute/assessor_agent.ini.local parameters serverip {{ PUBLIC_IP }}'
   when:
     - XMPP_DOMAIN == 'pulse'
     - PUBLIC_IP != ''

 - name: restart service mmc-agent
   service:
     name: mmc-agent
     state: restarted
   when:
     - XMPP_DOMAIN == 'pulse'
     - PUBLIC_IP != ''

 - name: restart service pulse-xmpp-master-substitute-assessor
   service:
     name: pulse-xmpp-master-substitute-assessor
     state: restarted
   when:
     - XMPP_DOMAIN == 'pulse'
     - PUBLIC_IP != ''

# Disable geolocalization
 - name: crudini type geolocalisation False
   shell: crudini --set /etc/pulse-xmpp-agent/relayconf.ini.local type geolocalisation False

# Enable and start the service
 - name: enable pulse-xmpp-agent-relay
   systemd:
     name: pulse-xmpp-agent-relay
     enabled: yes

 - name: restart service pulse-xmpp-agent-relay
   service:
     name: pulse-xmpp-agent-relay
     state: restarted

 - pause:
     seconds: 15

# Create the clusters of ARS for multisite installs
# First wait a few minutes until the relay server is configured
 - pause:
     minutes: 2
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: Get hostname
   shell: hostname -s
   register: result
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: set xmppDomain to hostname
   set_fact:
     XMPP_DOMAIN: "{{ result.stdout }}"
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: get MAX_ID FROM cluster_ars
   shell: echo 'SELECT MAX(id) FROM cluster_ars;' | mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} -s xmppmaster
   register: maxid
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'
     - ansible_distribution == "CentOS"

 - name: set CLUSTER_ID
   set_fact:
     CLUSTER_ID: "{{ maxid.stdout | int + 1 }}"
   when:
     - XMPP_DOMAIN != 'pulse'
     - ansible_distribution == "CentOS"

 - name: insert into cluster_ars
   shell: echo "INSERT INTO cluster_ars (id,name,description) VALUES ({{ CLUSTER_ID }},'{{ XMPP_DOMAIN }}','{{ XMPP_DOMAIN }}');" | mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} xmppmaster
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'
     - ansible_distribution == "CentOS"

##_config_relay_server
# Add the relayserver to the cluster

 - name: get MAX_ID FROM has_cluster_ars
   shell: echo 'SELECT MAX(id) FROM has_cluster_ars;' | mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} -s xmppmaster
   register: maxid
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'
     - ansible_distribution == "CentOS"

 - name: set NEXT_ID
   set_fact:
     NEXT_ID: "{{ maxid.stdout | int + 1 }}"
   when:
     - XMPP_DOMAIN != 'pulse'
     - ansible_distribution == "CentOS"

 - name: get RELAYSERVER_ID FROM relayserver
   shell: echo "SELECT id FROM relayserver WHERE nameserver='{{ XMPP_DOMAIN }}';" | mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} -s xmppmaster
   register: relayserverid
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'
     - ansible_distribution == "CentOS"

 - name: set RELAYSERVER_ID
   set_fact:
     RELAYSERVER_ID: "{{ relayserverid.stdout }}"
   when:
     - XMPP_DOMAIN != 'pulse'
     - ansible_distribution == "CentOS"

 - name: insert into has_cluster_ars
   shell: echo "INSERT INTO has_cluster_ars (id,id_ars,id_cluster) VALUES ('{{ NEXT_ID }}','{{ RELAYSERVER_ID }}','{{ CLUSTER_ID }}');" | mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} xmppmaster
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'
     - ansible_distribution == "CentOS"

# Create the substitutes configuration rules

 - name: create substituteconf records
   shell: echo "INSERT INTO xmppmaster.substituteconf (type, jidsubtitute, relayserver_id) VALUES ('assessor', 'master_asse@pulse', 1);" | mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} xmppmaster
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: create substituteconf records
   shell: echo "INSERT INTO xmppmaster.substituteconf (type, jidsubtitute, relayserver_id) VALUES ('subscription', 'master_subs@pulse', 1);" | mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} xmppmaster
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: create substituteconf records
   shell: echo "INSERT INTO xmppmaster.substituteconf (type, jidsubtitute, relayserver_id) VALUES ('registration', 'master_reg@pulse', 1);" | mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} xmppmaster
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: create substituteconf records
   shell: echo "INSERT INTO xmppmaster.substituteconf (type, jidsubtitute, relayserver_id) VALUES ('inventory', 'master_inv@pulse', 1);" | mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} xmppmaster
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: create substituteconf records
   shell: echo "INSERT INTO xmppmaster.substituteconf (type, jidsubtitute, relayserver_id) VALUES ('logger', 'master_log@pulse', 1);" | mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} xmppmaster
   when:
     - XMPP_DOMAIN == 'pulse'

# ------------
#DLEGATE TO

 - name: create substituteconf records
   shell: echo "INSERT INTO xmppmaster.substituteconf (type, jidsubtitute, relayserver_id) VALUES ('registration', 'master_reg@pulse', {{ RELAYSERVER_ID }});" | mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} xmppmaster
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'
     - ansible_distribution == "CentOS"

 - name: create substituteconf records
   shell: echo "INSERT INTO xmppmaster.substituteconf (type, jidsubtitute, relayserver_id) VALUES ('inventory', 'master_inv@pulse', {{ RELAYSERVER_ID }});" | mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} xmppmaster
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'
     - ansible_distribution == "CentOS"

 - name: create substituteconf records
   shell: echo "INSERT INTO xmppmaster.substituteconf (type, jidsubtitute, relayserver_id) VALUES ('assessor', 'master_asse@pulse', {{ RELAYSERVER_ID }});" | mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} xmppmaster
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'
     - ansible_distribution == "CentOS"

 - name: create substituteconf records
   shell: echo "INSERT INTO xmppmaster.substituteconf (type, jidsubtitute, relayserver_id) VALUES ('subscription', 'master_subs@pulse', {{ RELAYSERVER_ID }});" | mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} xmppmaster
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'
     - ansible_distribution == "CentOS"

 - name: create substituteconf records
   shell: echo "INSERT INTO xmppmaster.substituteconf (type, jidsubtitute, relayserver_id) VALUES ('logger', 'master_log@pulse', {{ RELAYSERVER_ID }});" | mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} xmppmaster
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'
     - ansible_distribution == "CentOS"


# Enable autoupdate by relay servers

 - name: crudini set autoupdatebyrelay
   shell: 'crudini --set /etc/pulse-xmpp-agent-substitute/loadautoupdate.ini parameters autoupdatebyrelay True'
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'
     - ansible_distribution == "CentOS"

 - name: crudini set autoupdatebyrelay
   shell: 'crudini --set /etc/mmc/plugins/xmppmaster.ini.local global autoupdatebyrelay True'
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'
     - ansible_distribution == "CentOS"

# ----------------

 - name: Create a directory /var/lib/pulse2/file-transfer/.ssh if it does not exist
   file:
     path: /var/lib/pulse2/file-transfer/.ssh
     state: directory
     mode: '0755'
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: Copy file with owner and permissions
   copy:
     src: /root/.ssh/id_rsa.pub
     dest: /var/lib/pulse2/file-transfer/.ssh/authorized_keys
     mode: '600'
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: recurse yes /var/lib/pulse2/file-transfer/.ssh owner pulsetransfert
   file:
     path: /var/lib/pulse2/file-transfer/.ssh
     owner: pulsetransfert
     group: pulsetransfert
     recurse: yes
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: chown 700 /var/lib/pulse2/file-transfer/.ssh
   file:
     path: /var/lib/pulse2/file-transfer/.ssh
     mode: '700'
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: Set authorized key in alternate location
   authorized_key:
     user: root
     state: present
     key: "{{ lookup('file', '/root/.ssh/id_rsa.pub') }}"
     path: /var/lib/pulse2/file-transfer/.ssh/authorized_keys
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'
     - ansible_distribution == "CentOS"

#######################################################
 - debug:
     msg: "___________________________"
 - debug:
     msg: "____CREATE_SERVER_CERTE____"
 - debug:
     msg: "___________________________"

#set xmppDomain
 - name: Get hostname
   shell: hostname -s
   register: result

 - name: set xmppDomain to hostname
   set_fact:
     XMPP_DOMAIN: "{{ result.stdout }}"

 - name: Get hostname
   shell: hostname -f
   register: result

 - name: set xmppDomain to hostname
   set_fact:
     SERVER_FQDN: "{{ result.stdout }}"

#set ssl_config
 - name: set SSL_CONF_FILE
   set_fact:
     SSL_CONF_FILE: '/var/lib/pulse2/pki/conf/pulse.cnf'

#when:
#  - XMPP_DOMAIN == 'pulse'

 - name: crudini alt_names DNS.1 {{ SERVER_FQDN }}
   shell: 'crudini --set {{ SSL_CONF_FILE }} alt_names DNS.1 {{ SERVER_FQDN }}'
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: crudini alt_names DNS.2 {{ XMPP_DOMAIN }}
   shell: 'crudini --set {{ SSL_CONF_FILE }} alt_names DNS.2 {{ XMPP_DOMAIN }}'
   when:
     - XMPP_DOMAIN == 'pulse'

# Create the key and sign request on Pulse main server

 - name: openssl config req certificate create the key and sign request on Pulse main server
   shell: openssl req -config {{ SSL_CONF_FILE }} -subj "/countryName=FR/organizationName=SIVEO/commonName={{ SERVER_FQDN }}" -passout pass:{{ PKI_PASSWORD }} -batch -extensions server_cert -new -keyout /var/lib/pulse2/pki/private/{{ SERVER_FQDN }}.key.pem -out /var/lib/pulse2/pki/req/{{ SERVER_FQDN }}.req.pem
   when:
     - XMPP_DOMAIN == 'pulse'

# Sign the certificate

 - name: openssl config ca certificate sign the certificate
   shell: openssl ca -config {{ SSL_CONF_FILE }} -name CA_Intermediate -passin pass:{{ PKI_PASSWORD }} -batch -extensions server_cert -extfile {{ SSL_CONF_FILE }} -keyfile /var/lib/pulse2/pki/private/cakey.pem -out /var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem -infiles /var/lib/pulse2/pki/req/{{ SERVER_FQDN }}.req.pem
   when:
     - XMPP_DOMAIN == 'pulse'

# Generate the final certificate
 - name: openssl -passin rsa generate the final certificate
   shell: openssl rsa -passin pass:{{ PKI_PASSWORD }} -in /var/lib/pulse2/pki/private/{{ SERVER_FQDN }}.key.pem -out /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: cat /var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem >> /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem
   shell: cat /var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem >> /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem
   when:
     - XMPP_DOMAIN == 'pulse'

# Remove the setting in ssl configuration file

 - name: crudini --del {{ SSL_CONF_FILE }} alt_names
   shell: crudini --del {{ SSL_CONF_FILE }} alt_names
   when:
     - XMPP_DOMAIN == 'pulse'

# Final tasks: permissions and cleanup

#replace by module file chmod
 - name: chmod 400 /var/lib/pulse2/pki/private/{{ SERVER_FQDN }}.key.pem
   file:
     path: /var/lib/pulse2/pki/private/{{ SERVER_FQDN }}.key.pem
     # owner: root
     # group: root
     mode: '400'
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: chmod 444 /var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem
   file:
     path: /var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem
     # owner: root
     # group: root
     mode: '444'
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: chmod 444 /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem
   file:
     path: /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem
     # owner: root
     # group: root
     mode: '444'
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: /bin/rm /var/lib/pulse2/pki/req/{{ SERVER_FQDN }}.req.pem
   shell: /bin/rm /var/lib/pulse2/pki/req/{{ SERVER_FQDN }}.req.pem
   when:
     - XMPP_DOMAIN == 'pulse'

# Get the keys to configure package server and ejabberd

 - name: /bin/cp /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem /etc/mmc/pulse2/package-server/keys/cacert.pem
   shell: /bin/cp /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem /etc/mmc/pulse2/package-server/keys/cacert.pem
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: /bin/cp /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem /etc/mmc/pulse2/package-server/keys/privkey.pem
   shell: /bin/cp /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem /etc/mmc/pulse2/package-server/keys/privkey.pem
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: /bin/cp /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem /etc/ejabberd/{{ XMPP_DOMAIN }}.pem
   shell: /bin/cp /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem /etc/ejabberd/{{ XMPP_DOMAIN }}.pem
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: Get hostname
   shell: hostname -s
   register: result

 - name: set xmppDomain to hostname
   set_fact:
     XMPP_DOMAIN: '{{ result.stdout }}'

 - name: set UUID
   set_fact:
     SSL_CONF_FILE: '/var/lib/pulse2/pki/conf/pulse.cnf'
   delegate_to: '{{ PULSEMAIN_IP }}'

 - name: crudini --set {{ SSL_CONF_FILE }} alt_names DNS.1 {{ SERVER_FQDN }}
   shell: crudini --set {{ SSL_CONF_FILE }} alt_names DNS.1 {{ SERVER_FQDN }}
   delegate_to: '{{ PULSEMAIN_IP }}'

 - debug:
     msg: crudini --set {{ SSL_CONF_FILE }} alt_names DNS.1 {{ SERVER_FQDN }}

 - name: crudini --set {{ SSL_CONF_FILE }} alt_names DNS.2 {{ XMPP_DOMAIN }}
   shell: crudini --set {{ SSL_CONF_FILE }} alt_names DNS.2 {{ XMPP_DOMAIN }}
   delegate_to: '{{ PULSEMAIN_IP }}'

 - debug:
     msg: crudini --set {{ SSL_CONF_FILE }} alt_names DNS.2 {{ XMPP_DOMAIN }}
# Create the key and sign request on Pulse main server

 - name: openssl req -config certificate create the key and sign request on Pulse main server
   shell: openssl req -config {{ SSL_CONF_FILE }} -subj "/countryName=FR/organizationName=SIVEO/commonName={{ SERVER_FQDN }}" -passout pass:{{ PKI_PASSWORD }} -batch -extensions server_cert -new -keyout /var/lib/pulse2/pki/private/{{ SERVER_FQDN }}.key.pem -out /var/lib/pulse2/pki/req/{{ SERVER_FQDN }}.req.pem
   delegate_to: '{{ PULSEMAIN_IP }}'

# Sign the certificate

 - name: openssl ca config ign the certificate
   shell: openssl ca -config {{ SSL_CONF_FILE }} -name CA_Intermediate -passin pass:{{ PKI_PASSWORD }} -batch -extensions server_cert -extfile {{ SSL_CONF_FILE }} -keyfile /var/lib/pulse2/pki/private/cakey.pem -out /var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem -infiles /var/lib/pulse2/pki/req/{{ SERVER_FQDN }}.req.pem
   delegate_to: '{{ PULSEMAIN_IP }}'

# Generate the final certificate

 - name: openssl rsa passin generate the final certificate
   shell: openssl rsa -passin pass:{{ PKI_PASSWORD }} -in /var/lib/pulse2/pki/private/{{ SERVER_FQDN }}.key.pem -out /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem
   delegate_to: '{{ PULSEMAIN_IP }}'

 - name: cat /var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem >> /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem
   shell: cat /var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem >> /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem
   delegate_to: '{{ PULSEMAIN_IP }}'

# Remove the setting in ssl configuration file

 - name: crudini --del {{ SSL_CONF_FILE }} alt_names
   shell: crudini --del {{ SSL_CONF_FILE }} alt_names
   delegate_to: '{{ PULSEMAIN_IP }}'

# Final tasks: permissions and cleanup

 - name: chmod 400 /var/lib/pulse2/pki/private/{{ SERVER_FQDN }}.key.pem
   file:
     path: /var/lib/pulse2/pki/private/{{ SERVER_FQDN }}.key.pem
    # owner: root
    # group: root
     mode: '400'
   delegate_to: '{{ PULSEMAIN_IP }}'

 - name: chmod 444 /var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem
   file:
     path: /var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem
    # owner: root
    # group: root
     mode: '444'
   delegate_to: '{{ PULSEMAIN_IP }}'

 - name: chmod 444 /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem
   file:
     path: /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem
    # owner: root
    # group: root
     mode: '444'
   delegate_to: '{{ PULSEMAIN_IP }}'

 - name: /bin/rm /var/lib/pulse2/pki/req/{{ SERVER_FQDN }}.req.pem
   shell: /bin/rm /var/lib/pulse2/pki/req/{{ SERVER_FQDN }}.req.pem
   delegate_to: '{{ PULSEMAIN_IP }}'

# Get the keys to configure ejabberd

 - name: fetch /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem from pulsemain
   fetch:
     src: "/var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem"
     dest: "/tmp/{{ansible_hostname}}-temp.pem"
     flat: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: copy {{ SERVER_FQDN }}.pem to /etc/ejabberd/{{ XMPP_DOMAIN }}.pem
   copy:
     src: "/tmp/{{ansible_hostname}}-temp.pem"
     dest: "/etc/ejabberd/{{ XMPP_DOMAIN }}.pem"
   when:
     - XMPP_DOMAIN != 'pulse'

# Replace ejabberd.pem by the certificate generated above

 - name: sed -i /etc/ejabberd/ejabberd.yml
   shell: sed -i "s/ejabberd.pem/{{ XMPP_DOMAIN }}.pem/" /etc/ejabberd/ejabberd.yml

 - name: restarted ejabberd
   systemd:
     name: ejabberd
     state: restarted

#######################################################
 - debug:
     msg: "______________________________"
 - debug:
     msg: "____CONFIG_SPECIFIQUE_CNAM____"
 - debug:
     msg: "______________________________"

 - name: crudini parameters pushmethod scp
   shell: crudini --set /etc/pulse-xmpp-agent/applicationdeploymentjson.ini.local parameters pushmethod scp

 - name: crudini quick_deploy max_size_stanza_xmpp 0
   shell: crudini --set /etc/pulse-xmpp-agent/relayconf.ini.local quick_deploy max_size_stanza_xmpp 0

 - name: restart pulse-xmpp-agent-relay
   systemd:
     name: pulse-xmpp-agent-relay
     state: restarted

#######################################################
 - debug:
     msg: "______________________________"
 - debug:
     msg: "____ACTIV_COMPRESSION_LOGS____"
 - debug:
     msg: "______________________________"

 - name: Add compress and delaycompess lines in pulse-xmpp-agent-relay logrotate file
   shell: '[ -f /etc/logrotate.d/pulse-xmpp-agent-relay ] && sed "/^}$/i  \    compress\n    delaycompress" -i /etc/logrotate.d/pulse-xmpp-agent-relay'

#######################################################
 - debug:
     msg: "______________________________"
 - debug:
     msg: "__________FINAL_STEP__________"
 - debug:
     msg: "______________________________"

 - pause:
     seconds: 30

 - name: restart pulse-xmpp-agent-relay
   systemd:
     name: pulse-xmpp-agent-relay
     state: restarted
