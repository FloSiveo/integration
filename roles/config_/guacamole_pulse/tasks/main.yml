---
####___________GUACAMOLE_____________
 - name: Get hostname
   shell: hostname -f
   register: result

 - name: set xmppDomain = 1
   set_fact:
     HOSTNAME_F: "{{ result.stdout }}"

 - name: set GUACAMOLE_ROOT_PASSWORD
   set_fact:
     GUACAMOLE_APACHE_PATH: '/etc/apache2/conf-available/guacamole.conf'
   when:
     - ansible_distribution == "Debian" or ansible_distribution == "Mageia"

 - name: set GUACAMOLE_ROOT_PASSWORD
   set_fact:
     GUACAMOLE_APACHE_PATH: '/etc/httpd/conf.d/guacamole.conf'
   when:
     - ansible_distribution == "CentOS"

 - name: set GUACAMOLE_ROOT_PASSWORD
   set_fact:
     GUACAMOLE_APACHE_PATH: '/etc/httpd/conf.d/guacamole.conf'
   when:
     - ansible_distribution == "Rhel"

 - name: Setup Apache write in {{ GUACAMOLE_APACHE_PATH }}
   copy:
     content: |
       <Location /guacamole/>
           SetEnvIf Referer "^https?://{{ SERVER_FQDN }}/" GUACAMOLE_ALLOWED
           Order Deny,Allow
           Deny from all
           Allow from env=GUACAMOLE_ALLOWED
           ProxyPass http://{{ HOSTNAME_F }}:8081/guacamole/ max=20 flushpackets=on
           ProxyPassReverse http://{{ HOSTNAME_F }}:8081/guacamole/
       </Location>
       <Location /guacamole/websocket-tunnel>
           SetEnvIf Referer "^https?://{{ SERVER_FQDN }}/" GUACAMOLE_ALLOWED
           Order Deny,Allow
           Deny from all
           Allow from env=GUACAMOLE_ALLOWED
           ProxyPass ws://{{ HOSTNAME_F }}:8081/guacamole/websocket-tunnel
           ProxyPassReverse ws://{{ HOSTNAME_F }}:8081/guacamole/websocket-tunnel
       </Location>
       SetEnvIf Request_URI "^/guacamole/tunnel" dontlog
       CustomLog  /var/log/apache2/guac.log common env=!dontlog
     dest: '{{ GUACAMOLE_APACHE_PATH }}'
   when:
     - INSTALL_TYPE == "p"
     - ansible_distribution == "Debian" or ansible_distribution == "Mageia"

 - name: Setup Apache write in {{ GUACAMOLE_APACHE_PATH }}
   copy:
     content: |
       <Location /guacamole/>
           SetEnvIf Referer "^https?://{{ SERVER_FQDN }}/" GUACAMOLE_ALLOWED
           Order Deny,Allow
           Deny from all
           Allow from env=GUACAMOLE_ALLOWED
           ProxyPass http://{{ HOSTNAME_F }}:8081/guacamole/ max=20 flushpackets=on
           ProxyPassReverse http://{{ HOSTNAME_F }}:8081/guacamole/
       </Location>
       <Location /guacamole/websocket-tunnel>
           SetEnvIf Referer "^https?://{{ SERVER_FQDN }}/" GUACAMOLE_ALLOWED
           Order Deny,Allow
           Deny from all
           Allow from env=GUACAMOLE_ALLOWED
           ProxyPass ws://{{ HOSTNAME_F }}:8081/guacamole/websocket-tunnel
           ProxyPassReverse ws://{{ HOSTNAME_F }}:8081/guacamole/websocket-tunnel
       </Location>
       SetEnvIf Request_URI "^/guacamole/tunnel" dontlog
       CustomLog  /var/log/httpd/guac.log common env=!dontlog
     dest: '{{ GUACAMOLE_APACHE_PATH }}'
   when:
     - INSTALL_TYPE == "p"
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"

 - name: a2enconf
   shell: 'a2enconf guacamole.conf'
   when:
     - ansible_distribution == "CentOS"
     - INSTALL_TYPE == "p"

 # - name:
 #   systemd:
 #     name: apache2
 #     state: restarted
 #   when:
 #     - ansible_distribution == "Debian" or ansible_distribution == "Mageia"

 - name:
   systemd:
     name: httpd
     state: restarted
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"
 #    # Setup Apache FOR PULSE PRINCIPALE /!

 ####___________SYNCTHING_____________

#_syncthing

 - name: Get hostname
   shell: hostname -f
   register: result

 - name: set xmppDomain = 1
   set_fact:
     XMPP_DOMAIN: "{{ result.stdout }}"

 - name: set SYNCTHING_APACHE_PATH
   set_fact:
     SYNCTHING_APACHE_PATH: '/etc/apache2/conf-available/syncthing.conf'
   when:
     - ansible_distribution == "Debian" or ansible_distribution == "Mageia"

 - name: set SYNCTHING_APACHE_PATH
   set_fact:
     SYNCTHING_APACHE_PATH: '/etc/httpd/conf.d/syncthing.conf'
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"

 - name: write in {{ SYNCTHING_APACHE_PATH }}
   lineinfile:
     line: "ProxyPass /syncthing-{{ XMPP_DOMAIN }}/ http://{{ XMPP_DOMAIN }}/syncthing/"
     dest: '{{ SYNCTHING_APACHE_PATH }}'

 - name: write in {{ SYNCTHING_APACHE_PATH }}
   lineinfile:
     line: "<Location /syncthing-{{ XMPP_DOMAIN }}/>"
     dest: '{{ SYNCTHING_APACHE_PATH }}'

 - name: write in {{ SYNCTHING_APACHE_PATH }}
   lineinfile:
     line: "    ProxyPassReverse http://{{ XMPP_DOMAIN }}/syncthing/"
     dest: '{{ SYNCTHING_APACHE_PATH }}'

 - name: write in {{ SYNCTHING_APACHE_PATH }}
   lineinfile:
     line: "    Require all granted"
     dest: '{{ SYNCTHING_APACHE_PATH }}'

 - name: write in {{ SYNCTHING_APACHE_PATH }}
   lineinfile:
     line: "</Location>"
     dest: '{{ SYNCTHING_APACHE_PATH }}'

 # - name:
 #   systemd:
 #     name: apache2
 #     state: restarted
 #   when:
 #     - ansible_distribution == "Debian" or ansible_distribution == "Mageia"

 - name:
   systemd:
     name: httpd
     state: restarted
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"

#Ã§syncthing_device_id

 - name: shell
   shell: syncthing -home=/var/lib/syncthing/.config/syncthing/ -device-id
   register: deviceid

 - name: set LOCAL_DEVICE_ID
   set_fact:
     LOCAL_DEVICE_ID: "{{ deviceid.stdout }}"

#_syncthing_share_packages

 - name: shell
   shell: stman folder add --label packages --foldertype readonly /var/lib/pulse2/packages/ pulsemaster_packages
   ignore_errors: yes
   when:
     - SHARE_ADDED == '0'

 - name: shell
   shell: stman folder share pulsemaster_packages {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   when:
     - SHARE_ADDED == '0'

 - pause:
     seconds: 20

 - name: set SHARE_ADDED
   set_fact:
     SHARE_ADDED: xmlstarlet sel -t -c "configuration/folder[@id='pulsemaster_packages']/device[@id='${LOCAL_DEVICE_ID}']" /var/lib/syncthing/.config/syncthing/config.xml |wc -c

 - name: shell xmlstarlet
   shell: '{{ SHARE_ADDED }}'
   register: xmlout

 - name: set LOCAL_DEVICE_ID
   set_fact:
     SHARE_ADDED: "{{ xmlout.stdout }}"

 - name: shell
   shell: stman folder unshare pulsemaster_packages {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   when:
     - SHARE_ADDED == '0'

 - name: shell
   shell: stman folder share pulsemaster_packages {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   when:
     - SHARE_ADDED == '0'

 - name: set SHARE_ADDED
   set_fact:
     SHARE_ADDED: xmlstarlet sel -t -c "configuration/folder[@id='pulsemaster_packages']/device[@id='${LOCAL_DEVICE_ID}']" /var/lib/syncthing/.config/syncthing/config.xml |wc -c

#_syncthing_share_bootmenus

 - name: shell
   shell: stman folder add --label bootmenus --foldertype readwrite /var/lib/pulse2/imaging/bootmenus/ pulsemaster_bootmenus
   ignore_errors: yes
   when:
     - SHARE_ADDED == '0'

 - name: shell
   shell: stman folder share pulsemaster_bootmenus {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   when:
     - SHARE_ADDED == '0'

 - pause:
     seconds: 20

 - name: set SHARE_ADDED
   set_fact:
     SHARE_ADDED: xmlstarlet sel -t -c "configuration/folder[@id='pulsemaster_bootmenus']/device[@id='{{ LOCAL_DEVICE_ID }}']" /var/lib/syncthing/.config/syncthing/config.xml |wc -c

 - name: shell xmlstarlet
   shell: '{{ SHARE_ADDED }}'
   register: xmlout

 - name: set LOCAL_DEVICE_ID
   set_fact:
     SHARE_ADDED: "{{ xmlout.stdout }}"

 - name: shell
   shell: stman folder unshare pulsemaster_bootmenus {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   when:
     - SHARE_ADDED == '0'

 - name: shell
   shell: stman folder share pulsemaster_bootmenus {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   when:
     - SHARE_ADDED == '0'

 - name: set SHARE_ADDED
   set_fact:
     SHARE_ADDED: xmlstarlet sel -t -c "configuration/folder[@id='pulsemaster_bootmenus']/device[@id='{{ LOCAL_DEVICE_ID }}']" /var/lib/syncthing/.config/syncthing/config.xml |wc -c

#_syncthing_share_baseremoteagent

 - name: shell
   shell: stman folder add --label baseremoteagent --foldertype readonly /var/lib/pulse2/xmpp_baseremoteagent/ pulsemaster_baseremoteagent
   ignore_errors: yes
   when:
     - SHARE_ADDED == '0'

 - name: shell
   shell: stman folder share pulsemaster_baseremoteagent {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   when:
     - SHARE_ADDED == '0'

 - pause:
     seconds: 20

 - name: set SHARE_ADDED
   set_fact:
     SHARE_ADDED: xmlstarlet sel -t -c "configuration/folder[@id='pulsemaster_baseremoteagent']/device[@id='${LOCAL_DEVICE_ID}']" /var/lib/syncthing/.config/syncthing/config.xml |wc -c

 - name: shell xmlstarlet
   shell: '{{ SHARE_ADDED }}'
   register: xmlout

 - name: set LOCAL_DEVICE_ID
   set_fact:
     SHARE_ADDED: "{{ xmlout.stdout }}"

 - name: shell
   shell: stman folder unshare pulsemaster_baseremoteagent {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   when:
     - SHARE_ADDED == '0'

 - name: shell
   shell: stman folder share pulsemaster_baseremoteagent {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   when:
     - SHARE_ADDED == '0'

 - name: set SHARE_ADDED
   set_fact:
     SHARE_ADDED: xmlstarlet sel -t -c "configuration/folder[@id='pulsemaster_baseremoteagent']/device[@id='${LOCAL_DEVICE_ID}']" /var/lib/syncthing/.config/syncthing/config.xml |wc -c

#_syncthing_share_pulsemaster_downloads

 - name: shell
   shell: stman folder add --label downloads --foldertype readonly /var/lib/pulse2/clients/ pulsemaster_downloads
   ignore_errors: yes
   when:
     - SHARE_ADDED == '0'

 - name: shell
   shell: stman folder share pulsemaster_downloads {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   when:
     - SHARE_ADDED == '0'

 - pause:
     seconds: 20

 - name: set SHARE_ADDED
   set_fact:
     SHARE_ADDED: xmlstarlet sel -t -c "configuration/folder[@id='pulsemaster_downloads']/device[@id='${LOCAL_DEVICE_ID}']" /var/lib/syncthing/.config/syncthing/config.xml |wc -c

 - name: shell xmlstarlet
   shell: '{{ SHARE_ADDED }}'
   register: xmlout

 - name: set LOCAL_DEVICE_ID
   set_fact:
     SHARE_ADDED: "{{ xmlout.stdout }}"

 - name: shell
   shell: stman folder unshare pulsemaster_downloads {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   when:
     - SHARE_ADDED == '0'

 - name: shell
   shell: stman folder share pulsemaster_downloads {{ LOCAL_DEVICE_ID }}
   ignore_errors: yes
   when:
     - SHARE_ADDED == '0'

 - name: set SHARE_ADDED
   set_fact:
     SHARE_ADDED: xmlstarlet sel -t -c "configuration/folder[@id='pulsemaster_downloads']/device[@id='${LOCAL_DEVICE_ID}']" /var/lib/syncthing/.config/syncthing/config.xml |wc -c

####FIN_sync_share

####Syncthing_depl write

 - name: set SYNCTHING_APACHE_PATH
   set_fact:
     SYNCTHING_APACHE_PATH: '/etc/apache2/conf-available/syncthing.conf'
   when:
     - ansible_distribution == "Debian" or ansible_distribution == "Mageia"

 - name: set SYNCTHING_APACHE_PATH
   set_fact:
     SYNCTHING_APACHE_PATH: '/etc/httpd/conf.d/syncthing.conf'
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"

 - name: write in {{ SYNCTHING_APACHE_PATH }}
   lineinfile:
     line: "ProxyPass /syncthing-depl-{{ XMPP_DOMAIN }}/ http://{{ XMPP_DOMAIN }}/syncthing-depl/"
     dest: '{{ SYNCTHING_APACHE_PATH }}'

 - name: write in {{ SYNCTHING_APACHE_PATH }}
   lineinfile:
     line: "<Location /syncthing-depl-{{ XMPP_DOMAIN }}/>"
     dest: '{{ SYNCTHING_APACHE_PATH }}'

 - name: write in {{ SYNCTHING_APACHE_PATH }}
   lineinfile:
     line: "    ProxyPassReverse http://{{ XMPP_DOMAIN }}/syncthing-depl/"
     dest: '{{ SYNCTHING_APACHE_PATH }}'

 - name: write in {{ SYNCTHING_APACHE_PATH }}
   lineinfile:
     line: "    Require all granted"
     dest: '{{ SYNCTHING_APACHE_PATH }}'

 - name: write in {{ SYNCTHING_APACHE_PATH }}
   lineinfile:
     line: "</Location>"
     dest: '{{ SYNCTHING_APACHE_PATH }}'

#reload apache2.service

 # - name: reload apache2
 #   systemd:
 #     name: apache2
 #     state: reloaded
 #   when:
 #     - ansible_distribution == "Debian" or ansible_distribution == 'Mageia'

 - name: set SSH_COMMAND
   systemd:
     name: httpd
     state: reloaded
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == 'Rhel'

##_config_relay_server

 - name: shell
   shell: grep -cx "{{ IP_REMOTE_SERVER1 }} {{ XMPP_DOMAIN }}" /etc/hosts
   register: grepres

 - name: set RES_GREP
   set_fact:
     RES_GREP: '{{ grepres.stdout }}'

 - name: write in /etc/hosts
   lineinfile:
     line: '{{ IP_REMOTE_SERVER1 }} {{ XMPP_DOMAIN }}'
     dest: /etc/hosts
   when:
     - grepres == 0
 #2
 - name: shell
   shell: grep -cx "{{ IP_REMOTE_SERVER2 }} {{ XMPP_DOMAIN }}" /etc/hosts
   register: grepres

 - name: set RES_GREP
   set_fact:
     RES_GREP: '{{ grepres.stdout }}'

 - name: write in /etc/hosts
   lineinfile:
     line: '{{ IP_REMOTE_SERVER2 }} {{ XMPP_DOMAIN }}'
     dest: /etc/hosts
   when:
     - grepres == 0

##_config_relay_server
# Create the cluster for the remote site

 - name: set MAX_ID
   set_fact:
     MAX_ID: echo 'SELECT MAX(id) FROM cluster_ars;' | mysql -s xmppmaster

 - name: set CLUSTER_ID
   set_fact:
     CLUSTER_ID: $((MAX_ID+1))

 - name: set SSH_COMMAND
   shell: echo "INSERT INTO cluster_ars (id,name,description) VALUES ({{ CLUSTER_ID }},'{{ MULTISITE_ENTITY }}// /_','{{ MULTISITE_ENTITY }}');" | mysql xmppmaster

##_config_relay_server
# Add the relayserver to the cluster

 - name: set MAX_ID
   set_fact:
     MAX_ID: echo 'SELECT MAX(id) FROM has_cluster_ars;' | mysql -s xmppmaster

 - name: shell
   shell: '{{ MAX_ID }}'
   register: maxid

 - name: set MAX_ID
   set_fact:
     MAX_ID: '{{ maxid.stdout }}'

 - name: set RELAYSERVER_ID
   set_fact:
     RELAYSERVER_ID: echo "SELECT id FROM relayserver WHERE nameserver='{{ XMPP_DOMAIN }}';" | mysql -s xmppmaster

 - name: shell
   shell: '{{ RELAYSERVER_ID }}'
   register: relayserverid

 - name: set RELAYSERVER_ID
   set_fact:
     RELAYSERVER_ID: '{{ relayserverid.stdout }}'

 - name: set SSH_COMMAND
   shell: echo "INSERT INTO has_cluster_ars (id,id_ars,id_cluster) VALUES ('{{ MAX_ID }}+1','{{ RELAYSERVER_ID }}','{{ CLUSTER_ID }}');" | mysql xmppmaster

##_config_relay_server
# Create the substitutes configuration rules

 - name: set RELAYSERVER_ID
   set_fact:
     RELAYSERVER_ID: echo "SELECT id FROM relayserver WHERE nameserver='{{ XMPP_DOMAIN }}';" | mysql -s xmppmaster

 - name: shell
   shell: '{{ RELAYSERVER_ID }}'
   register: relayserverid

 - name: set RELAYSERVER_ID
   set_fact:
     RELAYSERVER_ID: '{{ relayserverid.stdout }}'

 - name: set SSH_COMMAND
   shell: echo "INSERT INTO xmppmaster.substituteconf (type, jidsubtitute, relayserver_id) VALUES ('registration', 'master_reg@pulse', {{ RELAYSERVER_ID }});" | mysql xmppmaster

 - name: set SSH_COMMAND
   shell: echo "INSERT INTO xmppmaster.substituteconf (type, jidsubtitute, relayserver_id) VALUES ('inventory', 'master_inv@pulse', {{ RELAYSERVER_ID }});" | mysql xmppmaster

 - name: set SSH_COMMAND
   shell: echo "INSERT INTO xmppmaster.substituteconf (type, jidsubtitute, relayserver_id) VALUES ('assessor', 'master_asse@pulse', {{ RELAYSERVER_ID }});" | mysql xmppmaster

 - name: set SSH_COMMAND
   shell: echo "INSERT INTO xmppmaster.substituteconf (type, jidsubtitute, relayserver_id) VALUES ('subscription', 'master_subs@pulse', {{ RELAYSERVER_ID }});" | mysql xmppmaster

 - name: set SSH_COMMAND
   shell: echo "INSERT INTO xmppmaster.substituteconf (type, jidsubtitute, relayserver_id) VALUES ('logger', 'master_log@pulse', {{ RELAYSERVER_ID }});" | mysql xmppmaster

 - name: Set authorized key in alternate location
   authorized_key:
     user: root
     state: present
     key: "{{ lookup('file', '/root/.ssh/id_rsa.pub') }}"
     path: /var/lib/pulse2/file-transfer/.ssh/authorized_keys

##_check_mysql_connection

 - name: shell
   shell: sed "s/^bind-address.*/bind-address             = 0.0.0.0/g" -i /etc/mysql/mariadb.conf.d/50-server.cnf
   when:
     - ansible_distribution == "Debian" or ansible_distribution == "Mageia"
     - GLPI_DBHOST == PULSEMAIN_IP

 - name: shell
   shell: sed "s/^bind-address.*/bind-address             = 0.0.0.0/g" -i /etc/my.cnf
   when:
     - ansible_distribution == "CentOS" or ansible_distribution == "Rhel"
     - GLPI_DBHOST == PULSEMAIN_IP

     # Create remote glpi user

 - name: shell
   shell: echo "GRANT ALL PRIVILEGES ON {{ GLPI_DBNAME }}.* to '{{ GLPI_DBUSER }}'@'{{ IP_REMOTE_SERVER }}' identified by '{{ ROOT_PASSWORD }}';" |mysql -s
   when:
     - GLPI_DBHOST == PULSEMAIN_IP

 - name: restarted mariadb
   systemd:
     name: mariadb
     state: restarted
   when:
     - GLPI_DBHOST == PULSEMAIN_IP

##_configure_glpi_multisite
##_configure_package_server_multisite

   # Enable the Pulse MMC to listen from everywhere. Done on main Pulse server
 - name: shell
   shell: crudini --set /etc/mmc/agent/config.ini.local main host 0.0.0.0 && systemctl restart mmc-agent.service

   # Insert multisite imaging server in Pulse imaging server database. Done on main Pulse server.
 - name: shell
   shell: echo "INSERT INTO ImagingServer (name, url, fk_default_menu, packageserver_uuid, recursive, associated, fk_language, fk_entity) VALUES ('{{ MULTISITE_ENTITY }}', 'https://{{ IP_REMOTE_SERVER }}:9990/imaging_api', 1, '{{ PACKAGESERVER_UUID }}', 1, 0, 1, 1);" | mysql imaging

   # Create multisite imaging entity in Pulse imaging entities database. Done on main Pulse server
 - name: shell
   shell: echo 'SELECT id FROM imaging.ImagingServer ORDER BY id DESC LIMIT 1'|mysql -s
   register: uuidimag

 - name: set UUID_IMAGING
   set_fact:
     UUID_IMAGING: UUID'{{ uuidimag.stdout }}'

 - name: shell
   shell: echo "SELECT id FROM {{ GLPI_DBNAME }}.glpi_entities WHERE name='{{ MULTISITE_ENTITY }}';" |mysql -s
   register: glpientity

 - name: set GLPI_ENTITY_ID
   set_fact:
     GLPI_ENTITY_ID: '{{ glpientity.stdout }}'

 - name: set UUID
   set_fact:
     UUID: UUID'{{ GLPI_ENTITY_ID }}'

 - name: shell
   shell: echo "INSERT INTO imaging.Entity (name, uuid, pxe_keymap) values ('{{ MULTISITE_ENTITY }}','{{ UUID }}','fr_FR');" | mysql imaging

   # Register multisite package server in Pulse. Done on main Pulse server
 - name: shell
   shell: echo 'SELECT id FROM imaging.Entity  ORDER BY id DESC LIMIT 1'|mysql -s
   register: idout

 - name: set ID
   set_fact:
     ID: '{{ idout.stdout }}'

 - name: shell
   shell: echo "UPDATE ImagingServer SET associated=1, fk_entity={{ ID }} WHERE packageserver_uuid='{{ PACKAGESERVER_UUID }}';"| mysql imaging

##_create_server_cert

 - name: shell
   shell: crudini --set {{ SSL_CONF_FILE }} alt_names DNS.1 {{ SERVER_FQDN }}

 - name: shell
   shell: crudini --set {{ SSL_CONF_FILE }} alt_names DNS.2 {{ XMPP_DOMAIN }}

# Create the key and sign request on Pulse main server

 - name: shell
   shell: openssl req -config {{ SSL_CONF_FILE }} -subj "/countryName=FR/organizationName=SIVEO/commonName={{ SERVER_FQDN }}" -passout pass:{{ PKI_PASSWORD }} -batch -extensions server_cert -new -keyout /var/lib/pulse2/pki/private/{{ SERVER_FQDN }}.key.pem -out /var/lib/pulse2/pki/req/{{ SERVER_FQDN }}.req.pem

# Sign the certificate

 - name: shell
   shell: openssl ca -config {{ SSL_CONF_FILE }} -name CA_Intermediate -passin pass:{{ PKI_PASSWORD }} -batch -extensions server_cert -extfile {{ SSL_CONF_FILE }} -keyfile /var/lib/pulse2/pki/private/cakey.pem -out /var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem -infiles /var/lib/pulse2/pki/req/{{ SERVER_FQDN }}.req.pem

# Generate the final certificate

 - name: shell
   shell: openssl rsa -passin pass:{{ PKI_PASSWORD }} -in /var/lib/pulse2/pki/private/{{ SERVER_FQDN }}.key.pem -out /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem

 - name: shell
   shell: cat /var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem >> /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem

# Remove the setting in ssl configuration file

 - name: shell
   shell: crudini --del {{ SSL_CONF_FILE }} alt_names

# Final tasks: permissions and cleanup

- name: chmod 400
  file:
    path: /var/lib/pulse2/pki/private/{{ SERVER_FQDN }}.key.pem
    # owner: root
    # group: root
    mode: '400'

- name: chmod 444
  file:
    path: /var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem
    # owner: root
    # group: root
    mode: '444'

- name: chmod 444
  file:
    path: /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem
    # owner: root
    # group: root
    mode: '444'

 - name: shell
   shell: /bin/rm /var/lib/pulse2/pki/req/{{ SERVER_FQDN }}.req.pem

# Get the keys to configure package server and ejabberd

 - name: shell
   shell: scp {{ PULSEMAIN_IP }}:/var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem /etc/mmc/pulse2/package-server/keys/cacert.pem

 - name: shell
   shell: scp {{ PULSEMAIN_IP }}:/var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem /etc/mmc/pulse2/package-server/keys/privkey.pem

 - name: shell
   shell: scp {{ PULSEMAIN_IP }}:/var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem /etc/ejabberd/{{ XMPP_DOMAIN }}.pem
