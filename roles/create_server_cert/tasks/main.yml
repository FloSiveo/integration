---
#set xmppDomain
 - name: Get hostname
   shell: hostname -s
   register: result

 - name: set xmppDomain = 1
   set_fact:
     XMPP_DOMAIN: "{{ result.stdout }}"

 - name: Get hostname
   shell: hostname -f
   register: result

 - name: set xmppDomain = 1
   set_fact:
     SERVER_FQDN: "{{ result.stdout }}"

#set ssl_config
 - name: set SSL_CONF_FILE
   set_fact:
     SSL_CONF_FILE: '/var/lib/pulse2/pki/conf/pulse.cnf'

#when:
#  - XMPP_DOMAIN == 'pulse'

 - name: shell
   shell: 'crudini --set {{ SSL_CONF_FILE }} alt_names DNS.1 {{ SERVER_FQDN }}'
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: shell
   shell: 'crudini --set {{ SSL_CONF_FILE }} alt_names DNS.2 {{ XMPP_DOMAIN }}'
   when:
     - XMPP_DOMAIN == 'pulse'

# Create the key and sign request on Pulse main server

 - name: shell
   shell: openssl req -config {{ SSL_CONF_FILE }} -subj "/countryName=FR/organizationName=SIVEO/commonName={{ SERVER_FQDN }}" -passout pass:{{ PKI_PASSWORD }} -batch -extensions server_cert -new -keyout /var/lib/pulse2/pki/private/{{ SERVER_FQDN }}.key.pem -out /var/lib/pulse2/pki/req/{{ SERVER_FQDN }}.req.pem
   when:
     - XMPP_DOMAIN == 'pulse'

# Sign the certificate

 - name: shell
   shell: openssl ca -config {{ SSL_CONF_FILE }} -name CA_Intermediate -passin pass:{{ PKI_PASSWORD }} -batch -extensions server_cert -extfile {{ SSL_CONF_FILE }} -keyfile /var/lib/pulse2/pki/private/cakey.pem -out /var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem -infiles /var/lib/pulse2/pki/req/{{ SERVER_FQDN }}.req.pem
   when:
     - XMPP_DOMAIN == 'pulse'

# Generate the final certificate
 - name: shell
   shell: openssl rsa -passin pass:{{ PKI_PASSWORD }} -in /var/lib/pulse2/pki/private/{{ SERVER_FQDN }}.key.pem -out /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: shell
   shell: cat /var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem >> /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem
   when:
     - XMPP_DOMAIN == 'pulse'

# Remove the setting in ssl configuration file

 - name: shell
   shell: crudini --del {{ SSL_CONF_FILE }} alt_names
   when:
     - XMPP_DOMAIN == 'pulse'

# Final tasks: permissions and cleanup

#replace by module file chmod
 - name: chmod 400
   file:
     path: /var/lib/pulse2/pki/private/{{ SERVER_FQDN }}.key.pem
     # owner: root
     # group: root
     mode: '400'
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: chmod 444
   file:
     path: /var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem
     # owner: root
     # group: root
     mode: '444'
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: chmod 444
   file:
     path: /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem
     # owner: root
     # group: root
     mode: '444'
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: shell
   shell: /bin/rm /var/lib/pulse2/pki/req/{{ SERVER_FQDN }}.req.pem
   when:
     - XMPP_DOMAIN == 'pulse'

# Get the keys to configure package server and ejabberd

 - name: shell
   shell: /bin/cp /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem /etc/mmc/pulse2/package-server/keys/cacert.pem
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: shell
   shell: /bin/cp /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem /etc/mmc/pulse2/package-server/keys/privkey.pem
   when:
     - XMPP_DOMAIN == 'pulse'

 - name: shell
   shell: /bin/cp /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem /etc/ejabberd/{{ XMPP_DOMAIN }}.pem
   when:
     - XMPP_DOMAIN == 'pulse'

# rest

##_create_server_cert

 - name: Get hostname
   shell: hostname -s
   register: result

 - name: set xmppDomain = 1
   set_fact:
     XMPP_DOMAIN: '{{ result.stdout }}'

 - name: set UUID
   set_fact:
     SSL_CONF_FILE: '/var/lib/pulse2/pki/conf/pulse.cnf'
   delegate_to: '{{ PULSEMAIN_IP }}'

 - name: shell crudini
   shell: crudini --set {{ SSL_CONF_FILE }} alt_names DNS.1 {{ SERVER_FQDN }}
   delegate_to: '{{ PULSEMAIN_IP }}'

 - debug:
     msg: crudini --set {{ SSL_CONF_FILE }} alt_names DNS.1 {{ SERVER_FQDN }}

 - name: shell crudini
   shell: crudini --set {{ SSL_CONF_FILE }} alt_names DNS.2 {{ XMPP_DOMAIN }}
   delegate_to: '{{ PULSEMAIN_IP }}'

 - debug:
     msg: crudini --set {{ SSL_CONF_FILE }} alt_names DNS.2 {{ XMPP_DOMAIN }}
# Create the key and sign request on Pulse main server

 - name: shell openssl
   shell: openssl req -config {{ SSL_CONF_FILE }} -subj "/countryName=FR/organizationName=SIVEO/commonName={{ SERVER_FQDN }}" -passout pass:{{ PKI_PASSWORD }} -batch -extensions server_cert -new -keyout /var/lib/pulse2/pki/private/{{ SERVER_FQDN }}.key.pem -out /var/lib/pulse2/pki/req/{{ SERVER_FQDN }}.req.pem
   delegate_to: '{{ PULSEMAIN_IP }}'

# Sign the certificate

 - name: shell openssl
   shell: openssl ca -config {{ SSL_CONF_FILE }} -name CA_Intermediate -passin pass:{{ PKI_PASSWORD }} -batch -extensions server_cert -extfile {{ SSL_CONF_FILE }} -keyfile /var/lib/pulse2/pki/private/cakey.pem -out /var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem -infiles /var/lib/pulse2/pki/req/{{ SERVER_FQDN }}.req.pem
   delegate_to: '{{ PULSEMAIN_IP }}'

# Generate the final certificate

 - name: shell openssl
   shell: openssl rsa -passin pass:{{ PKI_PASSWORD }} -in /var/lib/pulse2/pki/private/{{ SERVER_FQDN }}.key.pem -out /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem
   delegate_to: '{{ PULSEMAIN_IP }}'

 - name: shell cat
   shell: cat /var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem >> /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem
   delegate_to: '{{ PULSEMAIN_IP }}'

# Remove the setting in ssl configuration file

 - name: shell crudini
   shell: crudini --del {{ SSL_CONF_FILE }} alt_names
   delegate_to: '{{ PULSEMAIN_IP }}'

# Final tasks: permissions and cleanup

 - name: chmod 400
   file:
     path: /var/lib/pulse2/pki/private/{{ SERVER_FQDN }}.key.pem
    # owner: root
    # group: root
     mode: '400'
   delegate_to: '{{ PULSEMAIN_IP }}'

 - name: chmod 444
   file:
     path: /var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem
    # owner: root
    # group: root
     mode: '444'
   delegate_to: '{{ PULSEMAIN_IP }}'

 - name: chmod 444
   file:
     path: /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem
    # owner: root
    # group: root
     mode: '444'
   delegate_to: '{{ PULSEMAIN_IP }}'

 - name: shell /bin/rm
   shell: /bin/rm /var/lib/pulse2/pki/req/{{ SERVER_FQDN }}.req.pem
   delegate_to: '{{ PULSEMAIN_IP }}'

# Get the keys to configure ejabberd

 - name: fetch /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem from pulsemain
   fetch:
     src: "/var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem"
     dest: "/tmp/{{ansible_hostname}}-temp.pem"
     flat: yes
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - XMPP_DOMAIN != 'pulse'

 - name: copy {{ SERVER_FQDN }}.pem to /etc/ejabberd/{{ XMPP_DOMAIN }}.pem
   copy:
     src: "/tmp/{{ansible_hostname}}-temp.pem"
     dest: "/etc/ejabberd/{{ XMPP_DOMAIN }}.pem"
   when:
     - XMPP_DOMAIN != 'pulse'

# Replace ejabberd.pem by the certificate generated above

 - name: shell
   shell: sed -i "s/ejabberd.pem/{{ XMPP_DOMAIN }}.pem/" /etc/ejabberd/ejabberd.yml

 - name: restarted
   systemd:
     name: ejabberd
     state: restarted
